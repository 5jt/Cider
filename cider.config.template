// Configuration file for the Dyalog project manager Cider.// Relative paths refer to the folder this config file stems from.// Use ]Cider.OpenProject to open a project that carries a file "cider.config".// For a detailed documentation see Cider's User Guide{    CIDER: {    // These are Cider's own configuration parameters                parent: "#",        projectSpace: "??",                 // Where the project is going to live; overwrite with ]Cider.OpenProject <path> -target=#.foo        source: "APLSource",                // Where does the code live? (relative to the project folder; might be empty)        dependencies: {                     // Folder(s) with installed Tatin packages the project eventually depends on            tatin: "packages",              // Accepts something like <packages,packages_dev=TestCases> (path1,path2=nameOfTargetNamespace)        },        dependencies_dev: {                 // Folder(s) with installed Tatin packages the project depends on for development and testing            tatin: "",                      // Accepts something like <packages,packages_dev=TestCases> (path1,path2=nameOfTargetNamespace)        },                distributionFolder: "",             // Folder used to put stuff for publishing, like a package ZIP or an installed EXE etc.        init: "",                           // Project fn; executed when everything else is done. Must be relative to projectSpace        project_url: "",             	    // For example a URL pointing to a GitHub project		tests : "",						    // Expression that executes the test cases of the project (if any)		make : "",						    // Expression that produces a new version of the project        version: "",                        // The version of Cider the file was created/modified with    },        LINK: {    // These are LINK parameters which are passed on to LINK when Cider brings the APL code into the WS with LINK    },                    SYSVARS: {                                // You may add other ⎕-variables here like, say, ⎕CT as "ct" etc.            io: 1,                                      ml: 1,    },    USER: {                                       // User-defined stuff (ignored by Cider); what follows is an example    // convertFromAcre : 1,                     },}
