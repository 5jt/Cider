 R←Test_Misc_002(stopFlag batchFlag);⎕TRAP;res;folder;parms;list
⍝ Exercise the ListOpenProjects function
 ⎕TRAP←(999 'C' '∘∘∘ ⍝ Deliberate error')(0 'N')
 R←T._Failed

 'TEMP'#.⎕NS''
 'TEMP2'#.⎕NS''
 folder←∆GetTestPath⊃⎕SI

 parms←''
 parms,←⊂folder,'/Project1'
 parms,←⊂''
 parms,←⊂''
 parms,←⊂''
 parms,←⊂1
 res←⎕SE.Cider.OpenProject parms
 →T.GoToTidyUp~res
 →T.GoToTidyUp 1≠≢#.TEMP.⎕NL 3
 →T.GoToTidyUp 0≠≢(' '~¨⍨↓#.TEMP.⎕NL(⍳16)~3)~⊂'CiderConfig'

 parms←''
 parms,←⊂folder,'/Project2'
 parms,←⊂''
 parms,←⊂''
 parms,←⊂''
 parms,←⊂1
 res←⎕SE.Cider.OpenProject parms
 →T.GoToTidyUp~res
 →T.GoToTidyUp 1≠≢#.TEMP2.⎕NL 3
 →T.GoToTidyUp 0≠≢(' '~¨⍨↓#.TEMP2.⎕NL(⍳16)~3)~⊂'CiderConfig'

 list←⎕SE.Cider.ListOpenProjects 0
 →T.GoToTidyUp 2≠2⊃⍴list   ⍝ Namespace, folder
 →T.GoToTidyUp 2>≢list
 →T.GoToTidyUp 2≠+/((-1+≢'Project1')↑¨list[;2])∊'/Project1' '/Project2' '\Project1' '\Project2'

 R←T._OK

∆TidyUp:
 res←∆LINK'Break' '#.TEMP'
 Assert res ∆StartsWith'Unlinked:'
 #.⎕EX'TEMP'
 res←∆LINK'Break' '#.TEMP2'
 Assert res ∆StartsWith'Unlinked:'
 #.⎕EX'TEMP2'
⍝Done
