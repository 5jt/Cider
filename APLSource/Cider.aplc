:Class Cider
⍝ Cider's application code.

    ⎕IO←1 ⋄ ⎕ML←1 ⋄ ⎕WX←3
    L←⎕SE.Link
    CR←⎕UCS 13

    ∇ r←Version
      :Access Public Shared
      r←'Cider' '0.8.2+166' '2021-12-23'
      ⍝   * wx removed as a system variable.
      ⍝   * Documentation improved.
      ⍝ * 0.8.1 ⋄ 2021-12-15
      ⍝   * Bug fixes:
      ⍝     * Checking Tatin install folders for better versions was buggy.
      ⍝     * A function noted on "lx" was not executed under :Trap but should.
      ⍝ * 0.8.0 ⋄ 2021-12-14
      ⍝   * BREAKING CHANGE: `OpenProject` accepts no positional parameters anymore, must be a parameter space.
      ⍝     Positional parameters are just not flexible enough.
      ⍝   * `OpenProject` now accepts an additional parameter `watch` (both API and user command)
      ⍝   * Default for `watch` changed from "both" to "ns"
      ⍝   * Bug fixes:
      ⍝     * Cider could not deal with a root project `parent=#|⎕SE` and `projectSpace=''`
      ⍝     * Cider should NOT worry about updating Tatin packages when `importFlag` is 1.
      ⍝ * 0.7.0 ⋄ 2021-11-29
      ⍝   * BREAKING CHANGE: The option -target in OpenProject was renamed to -projectSpace in order to bring it
      ⍝     in line with the name used for the same thing in the parameter namepsace usually created by `CreateOpenParms`
      ⍝   * Handling improved when an alias is assigned again. So far re-defining an alias was refused, making
      ⍝     it impossible to change the path of a project that had already an alias.
      ⍝ * 0.6.0 ⋄ 2021-11-24
      ⍝   * A user command and an API fn added: ]Cider.ViewConfig and ⎕SE.Cider.ViewConfig respectively
      ⍝   * Bug fixes
      ⍝     * Checking Tatin packages for updates: suppressing via parms did not work.
      ⍝     * Removing header line from result of Link.Status did not always work
      ⍝     * `ListOpenProjects` did not react appropriately when Link demands a Resync
      ⍝     * In `CreateOpenParms` the `parent` was set to `#`, making it impossible to honour the config file.
      ⍝ * 0.5.0 ⋄ 2021-10-15
      ⍝   * If a project has Tatin packages, the user might want Cider to check for later versions of those.
      ⍝     If there are any then the user might want to re-install the packges.
      ⍝   * ]Cider.OpenProject now offers a list with aliases even when just a `[` is passed, or `[?`.
      ⍝   * Readme.md improved
      ⍝   * An opening [ is enough for recognizing an alias
      ⍝ * 0.4.3 ⋄ 2021-10-27
      ⍝   * Bug fixes
      ⍝     * ListAliases did not sort the result by alias
      ⍝     * OpenProject [?] did not sort by alias
      ⍝     * When another alias is assigned the first one should be deleted
      ⍝     * Help regarding CloseProject did not mention aliases
      ⍝     * Handling of aliases was not perfect
      ⍝     * Sometimes an alias was not lowercased before saving it
      ⍝ * 0.4.2 ⋄ 2021-10-21
      ⍝   * Installation fixed (folder Cider\ was missing)
      ⍝ * 0.4.1 ⋄ 2021-10-15
      ⍝   * Bug fixes
      ⍝     * In case Expose->Root properties is not ticked some Cider commands crashed.
      ⍝ * 0.4.0 ⋄ 2021-10-13
      ⍝   * Section "SYSVARS" added to Cider's config file. Populated with "io", "ml" and "wx".
      ⍝     Other system vars may be added.
      ⍝     Files with old format are converted automatically (confirmation permitted).
      ⍝   * Check added to `ListOpenProjects` regarding ⍵ (must be Boolean)
      ⍝ * 0.3.0 ⋄ 2021-10-05
      ⍝   * `-noPkgLoad` flag added to `OpenProject`
      ⍝ * 0.2.0 ⋄ 2021-10-03
      ⍝   * `-import` flag added to `CreateProject`
      ⍝   * `CreateProject` now creates the folder if it does not already exist (confirmation permitted)
      ⍝   * `CreateProject` throws an error if an invalid path is provided
      ⍝   * `CreateProject` injects the last part of the path into the config file as "projectSpace" if not set
      ⍝   * `CreateOpenParms` now creates the parameter space where it was called from.
      ⍝ * 0.1.2 ⋄ 2021-09-23
      ⍝   * When an unknown project name was passed to `CloseProject` then ALL projects were closed rather than none
      ⍝   * Reporting to the session improved
      ⍝ * 0.1.1 ⋄ 2021-09-22
      ⍝   * `json.Cider` should have been `json.CIDER`
      ⍝   * When `CreateProject` did not create a project because of an invalid config file it did not tell
      ⍝   * When `CreateProject` did not create a project it still created an (invalid) file `cider.config`
      ⍝ * 0.1.0 ⋄ 2021-09-21
      ⍝   * Initial version
    ∇

    :Field Private Shared ReadOnly    failure←0
    :Field Private Shared ReadOnly    success←1

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

    ∇ successFlag←OpenProject parms;configFilename;config;bool;res;linkOptions;source;p;dmx;projectSpace_;parms;fn
    ⍝ Open a Cider project.\\
    ⍝ `parms` must be a namespace holding all the required parameters. Such a namespace can be created by calling `CreateOpenParms`
      :Access Public Shared
      successFlag←failure
      parms←CreateOpenParms parms
      '"folder" must be specified'Assert 0<parms.⎕NC'folder'
      '"folder" must be specified'Assert 0<≢parms.folder
      '"projectSpace" must be specified'Assert 0<parms.⎕NC'projectSpace'
      '"watch" must be one of: ns|dir|both'Assert(⊂⎕C parms.watch)∊'ns' 'dir' 'both'
      p←(~parms.quietFlag)∘ToQSE                                                        ⍝ Function for printing to the session
      parms←(p TranslateAlias2Folder)parms
      ('Folder does not exist: ',parms.folder)Assert ⎕NEXISTS parms.folder
      p((1+parms.importFlag)⊃'Loading' 'Importing'),' project from ',parms.folder
      parms.projectSpace←⍕parms.projectSpace
      :If 0<≢parms.parent
          parms.parent←,parms.parent
          'First level of parent must be either "#" or "⎕SE"'Assert(⊆1 ⎕C{⍵↑⍨¯1+⍵⍳'.'}parms.parent)∊,¨'#' '⎕SE'
          ('Parent namespace "',parms.parent,'" does not exist')Assert(9=⎕NC parms.parent)∨(⊂,1 ⎕C parms.parent)∊,¨'#' '⎕SE'
      :EndIf
      :If 0<≢parms.projectSpace
          ('"projectSpace" must not carry a "." (see "parent"')Assert 0='.'+.=parms.projectSpace
          'Project space is not a valid APL name'Assert{0::0 ⋄ 0=(⎕NS'').⎕NC ⍵}⍕parms.projectSpace
      :EndIf
      parms.alias←⎕C parms.alias
      p ProcessAlias parms.folder parms.alias
      configFilename←parms.folder,'/cider.config'
      ('No file "cider.config" found in ',parms.folder)Assert ⎕NEXISTS configFilename
      config←Get_JSON5 configFilename
      :If 0=≢parms.projectSpace                                                         ⍝ Was it specified as argument?
          parms.projectSpace←config.CIDER.projectSpace                                  ⍝ Nope, so the config file rules
      :EndIf
      :If 0=≢parms.parent                                                               ⍝ Was it specified as argument?
          parms.parent←config.CIDER.parent                                              ⍝ Nope, so the config file rules
      :EndIf
      :If 0=≢parms.projectSpace
          projectSpace_←⍎parms.parent                                                   ⍝ Is either # or ⎕SE
      :Else
          projectSpace_←⍎parms.projectSpace(⍎parms.parent).⎕NS''                        ⍝ Create project space from "parent" to avoid problems
      :EndIf
      CheckParameters config
      configFilename HandleSysVars config
      source←parms.folder,(0<≢config.CIDER.source)/'/',config.CIDER.source              ⍝ For linking we are only interested in the code folder
      ('Source folder does not exist: ',parms.folder)Assert ⎕NEXISTS parms.folder
      linkOptions←ExtractLinkOptions config                                             ⍝ Merge the default options with Cider's options
      p'Bringing in the source code...'
      :If parms.importFlag
          res←linkOptions ⎕SE.Link.Import projectSpace_ source                          ⍝ Get the code into the WS
          dmx←⎕DMX
          ('LINK failed to import the code (,',dmx.EM,')')⎕SIGNAL dmx.EN/⍨∨/'Error:'⍷res
      :Else
          res←linkOptions ⎕SE.Link.Create projectSpace_ source                          ⍝ Get the code into the WS
          dmx←⎕DMX
          ('LINK failed to load the code (,',dmx.EM,')')⎕SIGNAL dmx.EN/⍨∨/'Error:'⍷res
      :EndIf
      p'  Code established'
      :If 0=parms.noPkgLoad
          CheckPackagesStatus config parms
          {}LoadTatinPackages config parms.folder projectSpace_
      :EndIf
      InjectConfigDataIntoProject config projectSpace_ parms.folder
      {}ExecProjectFunction⍣(~parms.suppressLX)⊣config projectSpace_
      p ExecUserFunction config
      p'*** Project successfully ',((1+parms.importFlag)⊃'loaded' 'imported'),' and established in "',parms.parent,'.',parms.projectSpace,'"'
      successFlag←success
      ⍝Done
    ∇

    ∇ parms←CreateOpenParms y;list
    ⍝ Creates a namespace with all parameters one might pass to `OpenProject`.\\
    ⍝ `y` might be an empty vector or a namespace with some such parameters.
      :Access Public Shared
      parms←(1⊃1↓⎕RSI).⎕NS''        ⍝ Create namespace where we got called from
      parms.folder←''
      parms.projectSpace←''
      parms.quietFlag←0
      parms.alias←''
      parms.parent←''
      parms.suppressLX←0
      parms.importFlag←0
      parms.noPkgLoad←0
      parms.watch←'ns'
      parms.checkPackageVersions←⍬   ⍝ ⍬ means the user will be asked; 0 means don't. 1 means yes, check, but ask before updating, 2 means update
      :If ~(⊂y)∊''⍬
      :AndIf 9=⎕NC'y'
      :AndIf 0<≡list←' '~⍨¨↓y.⎕NL 2
          parms⍎¨list{' '=1↑0⍴⍵:⍺,'←''',⍵,'''' ⋄ ⍵≡⍬:⍺,'←⍬' ⋄ ⍺,'←',⍕⍵}¨y.{⍎⍵}¨list
      :EndIf
    ∇

    ∇ r←GetValidLinkParams
      r←⍬
      r,←⊂'arrays'
      r,←⊂'beforeRead'
      r,←⊂'beforeWrite'
      r,←⊂'caseCode'
      r,←⊂'codeExtensions'
      r,←⊂'fastLoad'
      r,←⊂'flatten'
      r,←⊂'forceExtensions'
      r,←⊂'forceFilenames'
      r,←⊂'getFilename'
      r,←⊂'typeExtensions'
      r,←⊂'watch'
    ∇

    ∇ r←GetValidCiderParams
      r←⍬
      r,←⊂'source'
      r,←⊂'lx'
      r,←⊂'parent'
      r,←⊂'projectSpace'
      r,←⊂'tatinFolder'
      r,←⊂'info_url'
    ∇

    ∇ options←ExtractLinkOptions config;C;overWrite
      options←L.U.DefaultOpts ⎕NS''
      C←config.LINK
      overWrite←{0=≢⍵:⍺ ⋄ ⍵}
      options.arrays(overWrite)←C.arrays
      options.beforeRead(overWrite)←C.beforeRead
      options.beforeWrite(overWrite)←C.beforeWrite
      options.caseCode(overWrite)←C.caseCode
      options.codeExtensions(overWrite)←C.codeExtensions
      options.fastLoad(overWrite)←C.fastLoad
      options.flatten(overWrite)←C.flatten
      options.forceExtensions(overWrite)←C.forceExtensions
      options.forceFilenames(overWrite)←C.forceFilenames
      options.getFilename(overWrite)←C.getFilename
      options.typeExtensions(overWrite)←↑C.typeExtensions
      options.watch←C.watch
      options.fastLoad←config.LINK.fastLoad
    ∇

    ∇ {r}←CheckParameters config;list;bool;list2
    ⍝ Check the parameters for being complete and valid
      r←⍬
      p'Checking parameters...'
      list←' '~⍨¨⊃,/↓¨config.(LINK CIDER).⎕NL 2
      list2←list~GetValidCiderParams
      bool←(list~GetValidCiderParams)∊GetValidLinkParams
      ('Invalid LINK parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/list2)Assert∧/bool
      bool←GetValidLinkParams∊list2
      ('Missing LINK parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/GetValidLinkParams)Assert∧/bool
      list2←list~GetValidLinkParams
      bool←(list~GetValidLinkParams)∊GetValidCiderParams
      ('Invalid Cider parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/list2)Assert∧/bool
      bool←GetValidCiderParams∊list2
      ('Missing Cider parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/GetValidCiderParams)Assert∧/bool
      p'  All fine'
    ∇

    ∇ {r}←configFilename HandleSysVars config;json;name;name_
    ⍝ For inheritance we specify the system vars early
      r←⍬
      :If 9=config.⎕NC'SYSVARS'     ⍝ Was introduced in version 0.4.0
          :For name :In ' '~⍨¨↓config.SYSVARS.⎕NL 2
              name_←1 ⎕C name
              :Trap 0
                  projectSpace_.⍎'⎕',name_,'←',⍕⍎'config.SYSVARS.',name
              :Else
                  p'>>> Assigning system variable "',name,'" failed'
              :EndTrap
          :EndFor
      :Else                         ⍝ SysVars prior to version 0.3.0
          projectSpace_.(⎕IO ⎕ML)←config.CIDER.(io ml)
          :If 1 YesOrNo'Convert old system vars definition to new one?'
              'SYSVARS'config.⎕NS''
              config.SYSVARS.(io ml )←config.CIDER.(io ml)
              config.CIDER.⎕EX¨'io' 'ml' 'wx'
              json←⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣config
              (⊂json)⎕NPUT configFilename 1
          :EndIf
      :EndIf
    ∇

    ∇ {r}←CheckPackagesStatus(config parms);checkFlag;folder;folders;folder_;updateFlag;updateParms;report
    ⍝ Check whether Tatin packages should be updated in case parms.importFlag is not 1.
    ⍝ This is ruled by parms.checkPackageVersions
    ⍝ ⍬ means the user will be asked for both checking and updating
    ⍝ 0 means don't update
    ⍝ 1 means yes, check, but ask before updating
    ⍝ 2 means update without further ado
      r←⍬
      :If 0<≢config.CIDER.tatinFolder
      :AndIf 0=parms.importFlag
          :If 0≢parms.checkPackageVersions
              :If (⊂parms.checkPackageVersions)∊⍬ 1
              :AndIf ~parms.quietFlag
                  checkFlag←0 YesOrNo' Check Tatin packages for later versions (does only report) ?'
              :Else
                  checkFlag←2≡parms.checkPackageVersions
              :EndIf
          :Else
              checkFlag←0
          :EndIf
          :If checkFlag
              report←⍬
              folders←','(≠⊆⊢)config.CIDER.tatinFolder
              report(CheckTatinFolders)←folders
              report←{⍵[;4]⌿⍵}¨report
              :If 0=+/≢¨report
                  p'   No later versions found '
              :Else
                  UpdatePackages folders report parms
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ report←report CheckTatinFolders folders;folder;folder_
    ⍝ Loop through all Tatin install folders
      :For folder :In folders
          folder_←⊃'='(≠⊆⊢)folder
          p'  Checking Tatin packages in <',(AddSlash folder_),'> ...'
          folder_←parms.folder,'/',folder_
          report,←⊂⎕SE.Tatin.CheckForLaterVersion folder_
      :EndFor
    ∇

    ∇ {r}←UpdatePackages(folders reports parms);i;folder;updateFlag;report
    ⍝ Update Tatin install folders by running ReInstallDependencies with the updateFlag set
    ⍝ Returns the number of install folders updated.
      r←0
      updateParms←⎕SE.Tatin.CreateReInstallParms
      updateParms.update←1
      :For i :In ⍳≢reports
          report←i⊃reports
          :If 0<≢report
              folder←{⍵↑⍨¯1+⍵⍳'='}i⊃folders
              p'   Later versions in <',(AddSlash folder),'> :'
              p' ',' ',' ',⎕FMT↑{(1⊃⍵),' ==> ',(2⊃⍵)}¨↓report
              :If ~updateFlag←2≡parms.checkPackageVersions
                  updateFlag←1 YesOrNo'Re-install latest versions in <',(AddSlash folder),'> ?'
              :EndIf
              :If updateFlag
                  p'  Re-installing all packages in <',(AddSlash folder),'> ...'
                  updateParms ⎕SE.Tatin.ReInstallDependencies parms.folder,'/',folder
                  r+←1
              :EndIf
          :EndIf
      :EndFor
    ∇

    ∇ {r}←LoadTatinPackages(config folder projectSpace);pkgFolders;pkgFolder;folder2;target;pkgFolder_
    ⍝ Load all installed packaged (if any) into their designates host namespaces.
      r←failure
      :If 0<≢config.CIDER.tatinFolder
          pkgFolders←⊆','(≠⊆⊢)config.CIDER.tatinFolder
          :For pkgFolder :In pkgFolders
              :If '='∊pkgFolder
                  (pkgFolder_ target)←'='(≠⊆⊢)pkgFolder
                  'Target namespace for Tatin packages is addressed with absolute path (invalid)'Assert~(⊃target)∊'#⎕'
                  :If (⊃config.CIDER.projectSpace)∊'#⎕'
                      target←config.CIDER.projectSpace,'.',target
                  :Else
                      target←'#.',config.CIDER.projectSpace,'.',target
                  :EndIf
              :Else
                  target←projectSpace
                  pkgFolder_←pkgFolder
              :EndIf
              p'Attempting to load Tatin packages from ',pkgFolder_,' into ',target,'...'
              folder2←folder,'/',pkgFolder_
              'Tatin installation folder does not exist'Assert ⎕NEXISTS folder2
              p'   '∘,¨⍕¨⎕SE.Tatin.LoadDependencies folder2 target
              r←success
          :EndFor
      :EndIf
    ∇

    ∇ {r}←flag ToQSE msg
      r←0 0⍴⍬
      :If flag
      :AndIf 0<≢msg
          ⎕←⍪⊆msg
      :EndIf
    ∇

    ∇ {r}←ExecProjectFunction(config projectSpace);fns;msg
    ⍝ Check whether a function "lx" is specified in the configuration and if so execute it.
      r←0
      :If 0<≢config.CIDER.lx
          :If '⋄'∊config.CIDER.lx
              msg←(⊂projectSpace config)ExecProjectFunction_¨'⋄'(≠⊆⊢)config.CIDER.lx
          :Else
              msg←(projectSpace config)ExecProjectFunction_ config.CIDER.lx
          :EndIf
          p msg
      :EndIf
    ∇

    ∇ msg←x ExecProjectFunction_ lx;fns;config;projectSpace;qdmx
      (projectSpace config)←x
      :If 3=projectSpace.⎕NC lx
          msg←⊂'Executing the project''s initialising function "',(lx~' '),'"...'
          :Select 1 2⊃projectSpace.⎕AT lx
          :Case 0
              :Trap 0
                  projectSpace.⍎lx
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "lx" crashed: ',qdmx.EM
              :EndTrap
          :CaseList 1 ¯2
              fns←projectSpace.⍎lx
              :Trap 0
                  fns config
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "lx" crashed: ',qdmx.EM
              :EndTrap
          :Else
              msg,←⊂'  Invalid function valence: is ambivalent'
          :EndSelect
      :Else
          msg←'Could not execute "',lx,'"; function not found'
      :EndIf
    ∇

    ∇ {msg}←ExecUserFunction config;fn;qdmx
    ⍝ Check whether the config parameter "ExecuteAfterProjectOpen" is set and execute it if it's a function.
      msg←''
      :If 0<≢fn←GetFunctionNameFromCiderConfigFile ⍬
          :If 1=1 1⊃⎕AT fn
              :Trap 0
                  ⍎'{}',fn,' config'
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "ExecuteAfterProjectOpen" crashed: ',qdmx.EM
              :EndTrap
          :Else
              :Trap 0
                  ⍎fn,' config'
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "ExecuteAfterProjectOpen" crashed: ',qdmx.EM
              :EndTrap
          :EndIf
      :EndIf
    ∇

    ∇ {r}←InjectConfigDataIntoProject(config projectSpace_ folder)
    ⍝ Create a namespace "CiderConfig" inside projectSpace and populate it with the configuration data
      r←⍬
      'CiderConfig'projectSpace_.⎕NS config
      projectSpace_.CiderConfig.HOME←folder
    ∇

    ∇ {r}←{editFlag}ViewConfig path;filename;ns;orig;flag
    ⍝ By default the contents of the file cider.config in "path" is put into the editor in read-only mode.
    ⍝ The user may edit the contents if ⍺ is 1 rather than anything else or undefined.
    ⍝ Returns 1 in case the file was modified and 0 otherwise.
      :Access Public Shared
      r←0
      editFlag←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'editFlag'
      :If '['∊path
          path←TranslateAliasToFolder path
          ('Alias "',path,'" not found')Assert 0<≢path
      :EndIf
      :If 'cider.config'{⍺≡⎕C(-≢⍺)↑⍵}path
      :AndIf (¯1↑(-≢'cider.config')↓path)∊'/\'
          filename←path
      :Else
          filename←path,'/cider.config'
      :EndIf
      ('Does not exist: "',filename,'"')Assert ⎕NEXISTS filename
      ns←⎕NS''
      orig←ns.cider_config←⊃⎕NGET filename 1
      flag←0
      :Repeat
          ns.⎕ED⍠('ReadOnly'(~(⊂,1)≡⊂,editFlag))⊣'cider_config'
          :If orig≢ns.cider_config
          :AndIf editFlag
          :AndIf 0<≢(∊ns.cider_config)~' '
              :If CheckJsonSyntax ns.cider_config
                  (⊂ns.cider_config)⎕NPUT filename 1
                  r←flag←1
              :Else
                  :If ~1 YesOrNo'Syntax check failed. Try again? (no=changes are lost)'
                      flag←1
                  :EndIf
              :EndIf
          :Else
              flag←1
          :EndIf
      :Until flag
    ∇

    ∇ r←ListOpenProjects verboseFlag;res;aliases;ind
      :Access Public Shared
      '⍵ must be a Boolean'Assert(⊂verboseFlag)∊0 1
      r←(0(2+2×verboseFlag))⍴''
      res←⎕SE.Link.Status''
      :If 'No active links'≢res
          :If 0<≢res←(∧/'Namespace' 'Directory' 'Files'∊res[1;])↓res   ⍝ Will become superfluous with a proper Link API but don't do damage
              'Link demands a Resync!'Assert~∨/'Link.Resync required'⍷∊res
          :AndIf 0<≢res←({⊃9=⍵.⎕NC'CiderConfig'}∘⍎¨res[;1])⌿res
              r←res[;,1],({6::'' ⋄ ⍎⍵,'.CiderConfig.HOME'}¨res[;1])
              :If verboseFlag
                  r,←res[;3]
              :EndIf
              r←(0<≢¨r[;2])⌿r
              r[;2]←DropTrailingSlash¨r[;2]
              r[;2]←{'/'@(⍸'\'=⍵)⊣⍵}¨r[;2]
              :If verboseFlag
                  :If 0<≢aliases←GetAliasFileContent
                      aliases[;2]←DropTrailingSlash¨aliases[;2]
                  :AndIf 0<≢aliases←(aliases[;2]∊r[;2])⌿aliases
                      r,←⊂''
                      ind←r[;2]⍳aliases[;2]
                      r[ind;4]←aliases[;1]
                  :Else
                      r,←⊂''
                  :EndIf
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ r←GetMyUCMDsFolder
      :Access Public Shared
    ⍝ Returns standard path for Dyalog's MyUCMDs folder.
    ⍝ Works on all platforms but returns different results.\\
    ⍝ Under Windows typically:\\
    ⍝ `C:\Users\{⎕AN}\Documents\MyUCMDs\'  ←→ GetMyUCMDsFolder
      :If IsWindows
          r←(2 ⎕NQ'.' 'GetEnvironment' 'USERPROFILE'),'/Documents\MyUCMDs'
      :Else
          r←(2 ⎕NQ'.' 'GetEnvironment' 'Home'),'/MyUCMDs'
      :EndIf
    ∇

    ∇ r←GetAliasFileContent;filename;buff
      :Access Public Shared
      r←0 2⍴''
      filename←GetCiderAliasFilename
      :If ⎕NEXISTS filename
      :AndIf 0<≢buff←⊃⎕NGET filename 1
      :AndIf 0<≢buff←(0<≢¨buff)/buff
          r←↑{'='(≠⊆⊢)⍵}¨buff
          r[;1]←⎕C¨r[;1]
          r[;2]←{'/'@(⍸'\'=⍵)⊣⍵}¨r[;2]
          r[;2]←{⍵↓⍨¯1×(¯1↑⍵)∊'/\'}¨r[;2]
          r←r[⍋r[;1];]
      :EndIf
    ∇

    ∇ r←CloseProject y;list;project;bool
    ⍝ Simply breaks the Link between a project and its folder in disk.
    ⍝ In case ⍵ is empty ALL projects are closed.
    ⍝ `y` may be one of:
    ⍝ * Empty vector (=close all)
    ⍝ * A projectName like #.Foo
    ⍝ * An alias like [my-alias]
    ⍝ Returns the number of projects closed.
      :Access Public Shared
      r←0
      :If 0<≢list←ListOpenProjects 1
          :If ∧/'[]'∊y
              :If 0=+/bool←list[;4]≡¨⊂⎕C y~'[]'
                  :Return
              :Else
                  project←⊃(list[;4]≡¨⊂⎕C y~'[]')⌿list[;1]
              :EndIf
          :Else
              project←y
          :EndIf
          :If (⊂project)∊list[;1]
              {}⎕SE.Link.Break project
              r←1
          :ElseIf 0=≢⍕y
              {}{⎕SE.Link.Break ⍵}¨list
              r←≢list
          :EndIf
      :EndIf
    ∇

    ∇ yesOrNo←{default}YesOrNo question;isOkay;answer;add;dtb;answer2
      :Access Public Shared
    ⍝ Ask a simple question and allows just "Yes" or "No" as answers.
    ⍝ You may specify a default via the optional left argument which when specified
    ⍝ rules what happens when the user just presses <enter>.
    ⍝ `default` must be either 1 (yes) or 0 (no).
    ⍝ Note that this function does not work as expected when traced!
      isOkay←0
      default←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'default'
      isOkay←0
      :If 0≠≢default
          'Left argument must be a scalar'⎕SIGNAL 11/⍨1≠≢default
      :AndIf ~default∊0 1
          'The left argument. if specified, must be a Boolean or empty'⎕SIGNAL 11
      :EndIf
      :If 0=≢default
          add←' (y/n) '
      :Else
          :If default
              add←' (Y/n) '
          :Else
              add←' (y/N) '
          :EndIf
      :EndIf
      :If 1<≡question
          ((≢question)⊃question)←((≢question)⊃question),add
          question←⍪question
      :Else
          question←question,add
      :EndIf
      :Repeat
          ⍞←question
          answer←⍞
          :If answer≡question                        ⍝ Did...  (since version 18.0 trailing blanks are not removed anynmore)
          :OrIf (≢answer)=¯1+≢question               ⍝ ..the ...
          :OrIf 0=≢answer                            ⍝ ...user just...
              dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
              answer2←dtb answer
          :OrIf answer2≡((-≢answer2)↑(⎕UCS 10){~⍺∊⍵:⍵ ⋄ ' ',dtb ⍺{⌽⍵↑⍨1+⍵⍳⍺}⌽⍵}question)   ⍝ ...press <enter>?
              :If 0≠≢default
                  yesOrNo←default
                  isOkay←1
              :EndIf
          :Else
              answer←¯1↑{⍵↓⍨-+/∧\' '=⌽⍵}answer
              :If answer∊'YyNn'
                  isOkay←1
                  yesOrNo←answer∊'Yy'
              :EndIf
          :EndIf
      :Until isOkay
    ∇

    ∇ {msg}←ProcessAlias(folder alias);ciderAliasFilename;data;q;path;folder_;row;path_;ind
    ⍝ Takes a folder and an alias.
    ⍝ If the folder does not exist `msg` carries a corresponding message.
    ⍝ * If the alias is already defined with that folder no action is taken
    ⍝ * If the alias is already defined with a different folder the user is asked to confirm overwriting it
    ⍝ * If the alias is undefined yet it as added
    ⍝ * You cannot delete an alias with this function.
      :Access Public Shared
      ciderAliasFilename←GetCiderAliasFilename
      msg←''
      alias~←'[]'
      :If 0≠≢alias
      :AndIf 0<≢ciderAliasFilename
          :If ⎕NEXISTS ciderAliasFilename
              data←⊃⎕NGET ciderAliasFilename 1
              :If ~⎕NEXISTS folder
                  msg←'Could not find "',folder,'"'
              :ElseIf 0=+/(alias,'=')∘{⍺≡(≢⍺)↑⍵}¨data
                  ind←({⍵↓⍨⍵⍳'='}¨data)⍳⊂folder
                  :If ind≤≢data
                      DropAlias{⍵↑⍨¯1+⍵⍳'='}ind⊃data
                      data←⊃⎕NGET ciderAliasFilename 1
                  :EndIf
                  (⊂data,⊂(⎕C alias),'=',folder)⎕NPUT ciderAliasFilename 1
              :Else
                  data←↑{'='(≠⊆⊢)⍵}¨data
                  :If (⊂alias)∊data[;1]
                      row←data[;1]⍳⊂alias
                      path←2⊃data[row;]
                      (path folder)←EnforceSlashInPath¨path folder
                      :If IsWindows
                          (path_ folder_)←⎕C¨path folder
                      :Else
                          (path_ folder_)←path folder
                      :EndIf
                      (path_ folder_)←{⍵↓⍨-'/'=¯1↑⍵}¨path_ folder_
                      :If ≢/path_ folder_
                          q←'Alias [',alias,'] is already defined for:',CR,('   ',path),CR,'Overwrite?'
                          :If YesOrNo q
                              data[row;2]←⊂folder
                              data←⊃¨{⍺,'=',⍵}/¨↓data
                              (⊂data)⎕NPUT ciderAliasFilename 1
                          :Else
                              msg←'*** Alias "',alias,'" is already in use with a different path - alias not assigned'
                          :EndIf
                      :EndIf
                  :EndIf
              :EndIf
          :Else
              (⊂(⎕C alias),'=',folder)⎕NPUT ciderAliasFilename
          :EndIf
      :EndIf
    ∇

    ∇ {successFlag}←DropAlias alias;ciderAliasFilename;data;noOf
      :Access Public Shared
      ciderAliasFilename←GetCiderAliasFilename
      successFlag←0
      :If 0≠≢alias
      :AndIf 0<≢ciderAliasFilename
          :If ⎕NEXISTS ciderAliasFilename
              noOf←≢data←⊃⎕NGET ciderAliasFilename 1
              data←((⊆alias),¨'='){⍵/⍨~((⍵↑⍨¨⍵⍳¨'='))∊⍺}data
              :If noOf>≢data
                  (⊂data)⎕NPUT ciderAliasFilename 1
                  successFlag←1
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ filename←GetCiderAliasFilename;folder
      :Access Public Shared
      filename←''
      :If 'W'=⊃1⊃'.'⎕WG'aplversion'
          :If 0=≢folder←⊃⎕SH'echo %APPDATA%'
              '%APPDATA% is undefined'⎕SIGNAL 11
          :Else
              folder,←'/.cider/'
          :EndIf
      :Else
          folder←(⊃⎕SH'echo $HOME'),'/.cider/'
      :EndIf
      1 ⎕MKDIR folder
      filename←folder,'aliase.txt'
    ∇

    ∇ filename←GetCiderConfigFilename;folder
    ⍝ Returns the name of the Cider config file.
    ⍝ As a side effect it creates the file with defaults if it does not yet exist.
      :Access Public Shared
      filename←''
      :If 'W'=⊃1⊃'.'⎕WG'aplversion'
          :If 0=≢folder←⊃⎕SH'echo %APPDATA%'
              '%APPDATA% is undefined'⎕SIGNAL 11
          :Else
              folder,←'/.cider/'
          :EndIf
      :Else
          folder←(⊃⎕SH'echo $HOME'),'/.cider/'
      :EndIf
      1 ⎕MKDIR folder
      filename←folder,'config.json'
      :If ~⎕NEXISTS filename
          filename ⎕NCOPY GetMyUCMDsFolder,'/Cider/.cider/config.json'
      :EndIf
    ∇

    ∇ parms←(fns TranslateAlias2Folder)parms;data;alias;msg;alias_;folder
    ⍝ Translates the alias in "folder" (if any) into a path from a parameter namespace.\\
    ⍝ If an alias is defined it is saved, possibly by overwriting the old one.
      :If '['∊parms.folder
          alias←parms.folder~'[]'
          folder←TranslateAliasToFolder alias
          :If 0<≢folder
              parms.folder←folder
              :If 0=≢parms.alias
                  parms.alias←alias
              :EndIf
          :Else
              (alias,'" is not a valid alias')⎕SIGNAL 11
          :EndIf
      :EndIf
    ∇

    ∇ folder←TranslateAliasToFolder alias;filename;data
    ⍝ Translates the alias in "folder" (if any) into a path.\\
    ⍝ In case the alias does not exist an empty vector is returned.\\
    ⍝ If an alias is defined it is saved, possibly by overwriting the old one.
      folder←''
      filename←GetCiderAliasFilename
      :If ⎕NEXISTS filename
          :If 0<≢data←⊃⎕NGET filename 1
              data←↑{'='(≠⊆⊢)⍵}¨data
              alias←⎕C alias~'[]'
              :If (⊂alias)∊data[;1]
                  folder←2⊃data[data[;1]⍳⊂alias;]
              :Else
                  ('"',alias,'" is not a valid alias')Assert(⎕NS'').{0=⎕NC ⍵}⎕C alias~'[]'
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ txt←DropTrailingSlash txt
      txt↓⍨←-'/\'∊⍨¯1↑txt
    ∇

    ∇ json←Get_JSON5 filename
      :If 0<≢json←⊃⎕NGET filename
          json←⎕JSON⍠('Dialect' 'JSON5')⊣json
      :EndIf
    ∇

    BitsToInt←{(32⍴2)⊥⌽32↑⍵}

    IntToBits←{⌽(32⍴2)⊤⍵}

    ∇ functionName←GetFunctionNameFromCiderConfigFile dummy;filename;cfg
      functionName←''
      :If ⎕NEXISTS filename←GetCiderConfigFilename
          cfg←Get_JSON5 filename
      :AndIf 0<≢cfg
      :AndIf 2=cfg.⎕NC'ExecuteAfterProjectOpen'
      :AndIf 0<≢functionName←cfg.ExecuteAfterProjectOpen
          :If 3≠⎕NC functionName
              '"ExecuteAfterProjectOpen" is not a function, therefore not executed'
              functionName←''
              :Return
          :EndIf
          :If 1≠1 2⊃⎕AT functionName
              '"ExecuteAfterProjectOpen" is not a monadic function, therefore not executed'
              functionName←''
              :Return
          :EndIf
      :EndIf
    ∇

    ∇ flag←CheckJsonSyntax json
      :Trap 0
          {}⎕JSON json
          flag←1
      :Else
          flag←0
      :EndTrap
    ∇

    ∇ path←AddSlash path
      path,←(~(¯1↑path)∊'/\')/'/'
    ∇

    ∇ r←IsWindows
      r←'Win'≡3↑⊃'.'⎕WG'APLVersion'
    ∇

    ∇ path←EnforceSlashInPath path;b
      :If 0<+/b←'\'=path
          (b/path)←'/'
      :EndIf
    ∇

:EndClass
