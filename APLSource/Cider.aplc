:Class Cider
⍝ Cider's application code.

    ⎕IO←1 ⋄ ⎕ML←1 ⋄ ⎕WX←3
    L←⎕SE.Link
    CR←⎕UCS 13

    ∇ r←Version
      :Access Public Shared
      r←'Cider' '0.15.0+272' '2022-09-11'
      ⍝ * 0.15.0 ⋄ 2022-09-11
      ⍝   * When a non-empty namespace is specified to CreateProject the user is asked whether the
      ⍝     the contents should be deleted. In case of a "No" the contents is written to file
      ⍝   * When opening a project the URLs packages were originally installed from are reported now
      ⍝   * The question for checking for Tatin updates defaults now to "N"
      ⍝   * Bug fixes
      ⍝     * The function `Get_JSON5` did not trap any domain errors when importing a JSON file and
      ⍝       therefore did not provide a helpful message on invalid files.
      ⍝ * 0.14.2 ⋄ 2022-08-24
      ⍝   * When a project was created and then, as part of the creation, opened the "watch" parameter was
      ⍝     always "both" no matter what
      ⍝   * User Guide improved
      ⍝ * 0.14.1 ⋄ 2022-08-18
      ⍝   * Bug fixes
      ⍝     * Messages regarding the execution of an "Init" function were printed too late
      ⍝     * No message was printed in case a user function was executed successfully
      ⍝ * 0.14.0 ⋄ 2022-08-06
      ⍝   * In case the target namespace is not empty (Link requirement) the user is now asked whether she
      ⍝     wants to delete the contents.
      ⍝   * The question for updating packages now requires confirmation (no default anymore)
      ⍝   * Bug fixes
      ⍝     * `CreateOpenParms`: refs were not converted to names
      ⍝     * Help for `]Cider.Make` as well as `]Cider.RunTests` was insufficient
      ⍝     * `OpenProject` did not check for valid parameters
      ⍝ * 0.13.0 ⋄ 2022-08-01
      ⍝   * Now cooperates with `APLGit2` rather than `Git`: see <https://github.com/aplteam/APLGit2>
      ⍝ * 0.12.0 ⋄ 2022-07-24
      ⍝   * `lx` renamed: `init`
      ⍝   * New property "tests" added to the config file
      ⍝   * New property "make" added to the config file
      ⍝   * User command ]Cider.RunTests added
      ⍝   * User command ]Cider.Make added
      ⍝   * Parameter "watch" is "both" again
      ⍝   * Uses the `MakeHelpers` package for its build process, and expects it in ⎕SE now.
      ⍝   * Internal improvements
      ⍝   * Bug fixes
      ⍝     * `CheckPackagesStatus` did produce a DOMAIN ERROR under some circumstances.
      ⍝ * 0.11.0 ⋄ 2022-06-02
      ⍝   * `OpenProject` and (implicitly) also `CreateProject` accept -alias=. which means that the last
      ⍝     part of the project path becomes the alias in lowercase.
      ⍝   * When no target namespace is specified for `CreateProject` then the last part of the folder
      ⍝     is taken as name of the namespace.
      ⍝   * Bug fixes
      ⍝     * `CreateProject` did not ask for checking packages when called from `CreateProject`
      ⍝     * The default for `tatinFolder` had a trailing slash that did not hurt but was not required
      ⍝     * `tatinFolder` was not allowed to be empty
      ⍝     * `PerformConfigChecks` was buggy
      ⍝     * Syntax Error causing typo fixed in `InjectConfigDataIntoProject`
      ⍝ * 0.10.2 ⋄ 2022-05-21
      ⍝   * HOME is now *always* an absolute path. (It being relative was actually a bug)
      ⍝   * `CreateProject` did ask whether to also open the project but did not ask whether it
      ⍝     should check any installed packages. It now does.
      ⍝   * ReadMe updated.
      ⍝   * Internal change: `ToQSE` is now `PrintToSession`
      ⍝ * 0.10.1 ⋄ 2022-05-08
      ⍝   * Bug fixes
      ⍝     * When a folder .git was found but Git was not installed then a confusing message was provided.
      ⍝ * 0.10.0 ⋄ 2022-04-23
      ⍝   * Bug fixes
      ⍝     * An invalid namespace name assgined to the `tatinFolder` parameter was not checked.
      ⍝     * JSON checking when editing a config file was less than perfect.
      ⍝ * 0.9.1 ⋄ 2022-04-15
      ⍝   * Bug fix: "\" was used no matter which OS
      ⍝ * 0.9.0 ⋄ 2022-03-17
      ⍝   * The alias syntax got enhanced; accepts now a wildcard like ]Cider.OpenProject [co*]
      ⍝   * ]Cider.CreateProject now asks the user whether the project should also be opened.
      ⍝     It did so in the past but silently, leaving some room for doubt.
      ⍝   * Mainly for tests the ]Cider.CreateProject command now has a -quiet flag.
      ⍝   * When no namespace is passed to ]Cider.CreateProject the last part of the path is taken as name
      ⍝   * The file cider.config.RemoveMe got renamed to cider.config.template
      ⍝   * When a tatin installation folder does not exist or is empty no error is generated anymore
      ⍝   * Bug fixes:
      ⍝     * Alias names should NOT be case-sensitive.
      ⍝     * Some user commands accepted an argument when they shouldn't.
      ⍝     * Erratic RANK ERROR on OpenProject fixed
      ⍝ * 0.8.4 ⋄ 2022-02-27
      ⍝   * Minor internal improvements
      ⍝   * LF is now enforced for text files via .gitattributes
      ⍝ * 0.8.3 ⋄ 2022-01-04
      ⍝   * Question regarding the checking for later Tatin packages improved
      ⍝   * Git status is only checked in case `quietFlag` and `importFlag` are both 0
      ⍝   * Tatin package statuses are checked only in case `importFlag` is 0
      ⍝   * Bug fixes:
      ⍝     * ListOpenProjects only beautified the result with -verbose
      ⍝     * ]Cider.OpenProject without argument provided no feedback at all when no Cider.config file was detected
      ⍝ * 0.8.2 ⋄ 2021-12-23
      ⍝   * wx removed as a system variable.
      ⍝   * Documentation improved.
      ⍝ * 0.8.1 ⋄ 2021-12-15
      ⍝   * Bug fixes:
      ⍝     * Checking Tatin install folders for better versions was buggy.
      ⍝     * A function noted on "lx" was not executed under :Trap but should.
      ⍝ * 0.8.0 ⋄ 2021-12-14
      ⍝   * BREAKING CHANGE: `OpenProject` accepts no positional parameters anymore, must be a parameter space.
      ⍝     Positional parameters are just not flexible enough.
      ⍝   * `OpenProject` now accepts an additional parameter `watch` (both API and user command)
      ⍝   * Default for `watch` changed from "both" to "ns"
      ⍝   * Bug fixes:
      ⍝     * Cider could not deal with a root project `parent=#|⎕SE` and `projectSpace=''`
      ⍝     * Cider should NOT worry about updating Tatin packages when `importFlag` is 1.
    ∇

    :Field Private Shared ReadOnly    FAILURE←0
    :Field Private Shared ReadOnly    SUCCESS←1

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

    ∇ successFlag←OpenProject parms;configFilename;config;bool;res;linkOptions;source;p;dmx;projectSpace_;parms;fn
    ⍝ Open a Cider project.\\
    ⍝ `parms` must be a namespace holding all the required parameters. Such a namespace can be created by calling `CreateOpenParms`
      :Access Public Shared
      successFlag←FAILURE
      parms←CreateOpenParms parms
      '"folder" must be specified'Assert 0<parms.⎕NC'folder'
      '"folder" must be specified'Assert 0<≢parms.folder
      '"projectSpace" must be specified'Assert 0<parms.⎕NC'projectSpace'
      '"watch" must be one of: ns|dir|both'Assert(⊂⎕C parms.watch)∊'ns' 'dir' 'both'
      p←(~parms.quietFlag)∘PrintToSession
      parms←(p GetFolderFromAlias2)parms
      ('Folder does not exist: ',parms.folder)Assert ⎕NEXISTS parms.folder
      p((1+parms.importFlag)⊃'Loading' 'Importing'),' project from ',parms.folder
      parms.projectSpace←⍕parms.projectSpace
      :If 0<≢parms.parent
          parms.parent←,parms.parent
          'First level of parent must be either "#" or "⎕SE"'Assert(⊆1 ⎕C{⍵↑⍨¯1+⍵⍳'.'}parms.parent)∊,¨'#' '⎕SE'
          ('Parent namespace "',parms.parent,'" does not exist')Assert(9=⎕NC parms.parent)∨(⊂,1 ⎕C parms.parent)∊,¨'#' '⎕SE'
      :EndIf
      :If 0<≢parms.projectSpace
          ('"projectSpace" must not carry a "." (see "parent"')Assert 0='.'+.=parms.projectSpace
          'Project space is not a valid APL name'Assert{0::0 ⋄ 0=(⎕NS'').⎕NC ⍵}⍕parms.projectSpace
      :EndIf
      parms.alias←⎕C parms.alias
      :If parms.alias≡'.'
          parms.alias←⎕C 2⊃{1 ⎕NPARTS(-(¯1↑⍵)∊'/\')↓⍵}parms.folder
      :EndIf
      p ProcessAlias parms.folder parms.alias
      configFilename←parms.folder,'/cider.config'
      ('No file "cider.config" found in ',parms.folder)Assert ⎕NEXISTS configFilename
      config←Get_JSON5 configFilename
      :If 0=≢parms.projectSpace                                                         ⍝ Was it specified as argument?
          parms.projectSpace←config.CIDER.projectSpace                                  ⍝ Nope, so the config file rules
      :EndIf
      :If 0=≢parms.parent                                                               ⍝ Was it specified as argument?
          parms.parent←config.CIDER.parent                                              ⍝ Nope, so the config file rules
      :EndIf
      :If 0=≢parms.projectSpace
          projectSpace_←⍎parms.parent                                                   ⍝ Is either # or ⎕SE
      :Else
          projectSpace_←⍎parms.projectSpace(⍎parms.parent).⎕NS''                        ⍝ Create project space from "parent" to avoid problems
      :EndIf
      'Already opened?!'Assert~CheckForAlreadyOpened projectSpace_
      CheckParameters config
      configFilename HandleSysVars config
      source←parms.folder,(0<≢config.CIDER.source)/'/',config.CIDER.source              ⍝ For linking we are only interested in the code folder
      ('Source folder does not exist: ',parms.folder)Assert ⎕NEXISTS parms.folder
      linkOptions←ExtractLinkOptions config                                             ⍝ Merge the default options with Cider's options
      p'Bringing in the source code...'
      CheckTargetNamespaceForBeingEmpty projectSpace_ parms
      :If parms.importFlag
          res←linkOptions ⎕SE.Link.Import projectSpace_ source                          ⍝ Get the code into the WS
          dmx←⎕DMX
          ('LINK failed to import the code (,',dmx.EM,')')⎕SIGNAL dmx.EN/⍨∨/'Error:'⍷res
      :Else
          res←linkOptions ⎕SE.Link.Create projectSpace_ source                          ⍝ Get the code into the WS
          dmx←⎕DMX
          ('LINK failed to load the code (,',dmx.EM,')')⎕SIGNAL dmx.EN/⍨∨/'Error:'⍷res
      :EndIf
      p'  Code established, "watch" is "',parms.watch,'"'
      :If 0=parms.noPkgLoad
          :If parms.folder CheckForTatinPackages config
              :If 0=parms.importFlag
                  CheckPackagesStatus config parms
              :EndIf
              {}LoadTatinPackages config parms.folder(⍕projectSpace_)
          :EndIf
      :EndIf
      InjectConfigDataIntoProject config projectSpace_ parms.folder
      {}ExecProjectInitFunction⍣(~parms.suppressInit)⊣config projectSpace_
      p ExecUserFunction config
      successFlag←SUCCESS
      :If 0=parms.quietFlag
      :AndIf 0=parms.importFlag
          p'*** Project successfully ',((1+parms.importFlag)⊃'loaded' 'imported'),' and established in "',parms.parent,'.',parms.projectSpace,'"'
          CheckForGit parms.folder config
      :EndIf
      ⍝Done
    ∇

    ∇ flag←path CheckForTatinPackages config;folders
    ⍝ Checks whether there one or more Tatin install folders are defined, exist and are not empty, in which case a 1 is returned.
      flag←0
      :If 0<≢config.CIDER.tatinFolder
          folders←','(≠⊆⊢)config.CIDER.tatinFolder
          folders←{'='∊⍵:⍵↑⍨¯1+⍵⍳'=' ⋄ ⍵}¨folders
      :AndIf 0<≢folders←(0<≢¨folders)/folders
      :AndIf 0<≢folders←(⎕NEXISTS(⊂path,'/'),¨folders)/folders
          flag←0<+/{≢⊃0 ⎕NINFO⍠('Wildcard' 1)⊣⍵}¨(⊂path,'/'),¨folders,¨⊂'/*'
      :EndIf
    ∇

    ∇ ok←CheckTargetNamespace projectSpace
      :If 0=⎕NC⍕projectSpace
          ok←1
      :ElseIf 0=≢projectSpace.⎕NL 2 3 4 9
          ok←1
      :Else
          ok←0
      :EndIf
    ∇

    ∇ parms←CreateOpenParms y;list;b;l
    ⍝ Creates a namespace with all parameters one might pass to `OpenProject`.\\
    ⍝ `y` might be an empty vector or a namespace with some such parameters.
    ⍝ Any parameters passed this way overwrite defaults.
      :Access Public Shared
      parms←(1⊃1↓⎕RSI,⎕THIS).⎕NS''      ⍝ Create namespace where we got called from
      parms.folder←''
      parms.projectSpace←''
      parms.quietFlag←0
      parms.alias←''
      parms.parent←''
      parms.suppressInit←0
      parms.importFlag←0
      parms.noPkgLoad←0
      parms.watch←'both'
      parms.checkPackageVersions←⍬      ⍝ ⍬ means the user will be asked; 0 means don't. 1 means yes, check, but ask before updating, 2 means update
      :If ~(⊂y)∊''⍬
      :AndIf 9=⎕NC'y'
          :If 9=y.⎕NC'projectSpace'
              y.projectSpace←⍕y.projectSpace
          :EndIf
          :If 9=y.⎕NC'parent'
              y.parent←⍕y.parent
          :EndIf
          '⍵ must not contain references'Assert 0=≢y.⎕NL 9
          (b{0=+/b:'' ⋄ 'Invalid parameter: ',⊃{⍺,',',⍵}/⍺/⍵}l)Assert 0=+/b←~(l←' '~⍨¨↓y.⎕NL 2)∊' '~⍨¨↓parms.⎕NL 2
          :If 0<≢list←' '~⍨¨↓y.⎕NL 2
              parms⍎¨list{' '=1↑0⍴⍵:⍺,'←''',⍵,'''' ⋄ ⍵≡⍬:⍺,'←⍬' ⋄ ⍺,'←',⍕⍵}¨y.{⍎⍵}¨list
          :EndIf
      :EndIf
    ∇

    ∇ r←GetValidLinkParams
      r←⍬
      r,←⊂'arrays'
      r,←⊂'beforeRead'
      r,←⊂'beforeWrite'
      r,←⊂'caseCode'
      r,←⊂'codeExtensions'
      r,←⊂'fastLoad'
      r,←⊂'flatten'
      r,←⊂'forceExtensions'
      r,←⊂'forceFilenames'
      r,←⊂'getFilename'
      r,←⊂'typeExtensions'
      r,←⊂'watch'
    ∇

    ∇ r←GetValidCiderParams
      r←⍬
      r,←⊂'source'
      r,←⊂'init'
      r,←⊂'parent'
      r,←⊂'projectSpace'
      r,←⊂'tatinFolder'
      r,←⊂'info_url'
      r,←⊂'tests'
      r,←⊂'make'
    ∇

    ∇ options←ExtractLinkOptions config;C;overWrite
      options←L.U.DefaultOpts ⎕NS''
      C←config.LINK
      overWrite←{0=≢⍵:⍺ ⋄ ⍵}
      options.arrays(overWrite)←C.arrays
      options.beforeRead(overWrite)←C.beforeRead
      options.beforeWrite(overWrite)←C.beforeWrite
      options.caseCode(overWrite)←C.caseCode
      options.codeExtensions(overWrite)←C.codeExtensions
      options.fastLoad(overWrite)←C.fastLoad
      options.flatten(overWrite)←C.flatten
      options.forceExtensions(overWrite)←C.forceExtensions
      options.forceFilenames(overWrite)←C.forceFilenames
      options.getFilename(overWrite)←C.getFilename
      options.typeExtensions(overWrite)←↑C.typeExtensions
      options.watch←C.watch
      options.fastLoad←config.LINK.fastLoad
    ∇

    ∇ {r}←CheckParameters config;list;bool;list2
    ⍝ Check the parameters for being complete and valid
      r←⍬
      p'Checking parameters...'
      list←' '~⍨¨⊃,/↓¨config.(LINK CIDER).⎕NL 2
      list2←list~GetValidCiderParams
      bool←(list~GetValidCiderParams)∊GetValidLinkParams
      ('Invalid LINK parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/list2)Assert∧/bool
      bool←GetValidLinkParams∊list2
      ('Missing LINK parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/GetValidLinkParams)Assert∧/bool
      list2←list~GetValidLinkParams
      bool←(list~GetValidLinkParams)∊GetValidCiderParams
      ('Invalid Cider parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/list2)Assert∧/bool
      bool←GetValidCiderParams∊list2
      ('Missing Cider parameter',((1<+/~bool)/'s'),': ',{0=≢⍵:'' ⋄ ⊃{⍺,',',⍵}/⍵}(~bool)/GetValidCiderParams)Assert∧/bool
      p'  All fine'
    ∇

    ∇ {r}←CheckForGit(path config);status;dmx
    ⍝ Checks whether the project is managed by Git, and if so offers some help
      r←⍬
      :If ⎕NEXISTS(AddSlash path),'.git'
          p'Project appears to be managed by Git...'
          :If 9=⎕SE.⎕NC'_APLGit2'
              :Trap 0
                  status←⎕SE.APLGit2.Status path
              :Else
                  dmx←⎕DMX
                  :If 127=dmx.EN
                      p'...but apparently Git is not installed'
                      :Return
                  :Else
                      dmx.Message ⎕SIGNAL dmx.EN
                  :EndIf
              :EndTrap
              :If 10>≢status
                  p'Git status report:'
                  p' ',' ',' ',↑status
              :Else
                  {{}(#.⎕NS'').(⎕ED⍠('ReadOnly' 1)&{'ed'}ed←⍵)}status
              :EndIf
          :Else
              p'Missing user command ]APLGit2 as well as it''s API, therefore no information can be provided regarding Git'
          :EndIf
      :Else
          p'Project is not managed by Git'
      :EndIf
    ∇

    ∇ {r}←configFilename HandleSysVars config;json;name;name_
    ⍝ For inheritance we specify the system vars early
      r←⍬
      :If 9=config.⎕NC'SYSVARS'     ⍝ Was introduced in version 0.4.0
          :For name :In ' '~⍨¨↓config.SYSVARS.⎕NL 2
              name_←1 ⎕C name
              :Trap 0
                  projectSpace_.⍎'⎕',name_,'←',⍕⍎'config.SYSVARS.',name
              :Else
                  p'>>> Assigning system variable "',name,'" failed'
              :EndTrap
          :EndFor
      :Else                         ⍝ SysVars prior to version 0.3.0
          projectSpace_.(⎕IO ⎕ML)←config.CIDER.(io ml)
          :If 1 YesOrNo'Convert old system vars definition to new one?'
              'SYSVARS'config.⎕NS''
              config.SYSVARS.(io ml)←config.CIDER.(io ml)
              config.CIDER.⎕EX¨'io' 'ml' 'wx'
              json←Put_JSON5 configFilename
          :EndIf
      :EndIf
    ∇

    ∇ {r}←CheckPackagesStatus(config parms);checkFlag;folder;folders;folder_;updateFlag;updateParms;report
    ⍝ Check whether Tatin packages should be updated in case parms.importFlag is not 1.
    ⍝ This is ruled by parms.checkPackageVersions
    ⍝ ⍬ means the user will be asked for both checking and updating
    ⍝ 0 means don't update
    ⍝ 1 means yes, check, but ask before updating
    ⍝ 2 means update without further ado
      r←⍬
      :If 0<≢config.CIDER.tatinFolder
          :If 0≢parms.checkPackageVersions
              :If (⊂parms.checkPackageVersions)∊⍬ 1
              :AndIf ~parms.quietFlag
                  checkFlag←0 YesOrNo' Report availability of later versions of installed Tatin packages?'
              :Else
                  checkFlag←2≡parms.checkPackageVersions
              :EndIf
          :Else
              checkFlag←0
          :EndIf
          :If checkFlag
              report←⍬
              folders←','(≠⊆⊢)config.CIDER.tatinFolder
              1 ⎕SE._Tatin.Client.EstablishRumbaClients ⍬
              :If 0<≢report←report CheckTatinFolders folders
                  report←{⍵[;4]⌿⍵}¨report
              :AndIf 0=+/≢¨report
                  p'   No later versions found '
              :Else
                  UpdatePackages folders report parms
              :EndIf
              ⎕SE._Tatin.Client.CloseConnections 1
          :EndIf
      :EndIf
    ∇

    ∇ report←report CheckTatinFolders folders;folder;folder_;qdmx
    ⍝ Loop through all Tatin install folders
      :For folder :In folders
          folder_←⊃'='(≠⊆⊢)folder
          :If ⎕NEXISTS parms.folder,'/',folder_
              p'  Checking Tatin packages in <',(AddSlash folder_),'> ...'
              folder_←parms.folder,'/',folder_
              :If 0<≢⊃0 ⎕NINFO⍠('Wildcard' 1)⊣folder_,'/*'
                  :Trap 998
                      report,←⊂⎕SE.Tatin.CheckForLaterVersion folder_
                  :Else
                      qdmx←⎕DMX
                      :If qdmx.EM≡'The build list carries entries that are not on the Tatin Registry search path'
                          p'   >>> Checking for later versions of Tatin packages failed:'
                          p'   ',qdmx.EM
                      :Else
                          qdmx.EM ⎕SIGNAL 998
                      :EndIf
                  :EndTrap
              :Else
                  p'     Folder is empty'
              :EndIf
          :EndIf
      :EndFor
    ∇

    ∇ {r}←UpdatePackages(folders reports parms);i;folder;updateFlag;report;updateParms
    ⍝ Update Tatin install folders by running ReInstallDependencies with the updateFlag set
    ⍝ Returns the number of install folders updated.
      r←0
      updateParms←⎕SE.Tatin.CreateReInstallParms
      updateParms.update←1
      updateParms.quiet←parms.quietFlag
      :For i :In ⍳≢reports
          report←i⊃reports
          :If 0<≢report
              folder←{⍵↑⍨¯1+⍵⍳'='}i⊃folders
              p'   Later versions in <',(AddSlash folder),'> :'
              p' ',' ',' ',⎕FMT↑{(1⊃⍵),' ==> ',(2⊃⍵)}¨↓report
              :If ~updateFlag←2≡parms.checkPackageVersions
                  updateFlag←1 YesOrNo'Re-install latest versions in <',(AddSlash folder),'> ?'
              :EndIf
              :If updateFlag
                  p'  Re-installing all packages in <',(AddSlash folder),'> ...'
                  updateParms ⎕SE.Tatin.ReInstallDependencies parms.folder,'/',folder
                  r+←1
              :EndIf
          :EndIf
      :EndFor
    ∇

    ∇ {r}←LoadTatinPackages(config folder projectSpace);pkgFolders;pkgFolder;folder2;target;pkgFolder_
    ⍝ Load all installed packaged (if any) into their designated host namespaces.
      r←FAILURE
      :If 0<≢config.CIDER.tatinFolder
          pkgFolders←⊆','(≠⊆⊢)config.CIDER.tatinFolder
          :For pkgFolder :In pkgFolders
              :If '='∊pkgFolder
                  (pkgFolder_ target)←'='(≠⊆⊢)pkgFolder
                  'Target namespace for Tatin packages is addressed with absolute path (invalid)'Assert~(⊃target)∊'#⎕'
                  target←projectSpace,'.',target
              :Else
                  target←projectSpace
                  pkgFolder_←pkgFolder
              :EndIf
              p'Attempting to load Tatin packages from ',pkgFolder_,' into ',target,'...'
              folder2←folder,'/',pkgFolder_
              :If ⎕NEXISTS folder2
                  :If 0<0<≢⊃0 ⎕NINFO⍠('Wildcard' 1)⊣folder2,'/*'
                      p ReportPackageOrigins folder2
                      p'List of packages loaded:'
                      p'   '∘,¨⍕¨⎕SE.Tatin.LoadDependencies folder2 target
                  :Else
                      p'Tatin installation folder "',folder2,'" is empty, therefore no packages loaded'
                  :EndIf
              :Else
                  p'Tatin installation folder "',folder2,'" does not exists, therefore no packages loaded'
              :EndIf
              r←SUCCESS
          :EndFor
      :EndIf
    ∇

    ∇ {r}←flag PrintToSession msg
      r←0 0⍴⍬
      :If flag
      :AndIf 0<≢msg
          ⎕←⍪⊆msg
      :EndIf
    ∇

    ∇ {r}←ExecProjectInitFunction(config projectSpace);fns
    ⍝ Check whether a function "lx" is specified in the configuration and if so execute it.
      r←0
      :If 0<≢config.CIDER.init
          :If '⋄'∊config.CIDER.init
              (⊂projectSpace config)ExecProjectFunction_¨'⋄'(≠⊆⊢)config.CIDER.init
          :Else
              (projectSpace config)ExecProjectFunction_ config.CIDER.init
          :EndIf
      :EndIf
    ∇

    ∇ {r}←x ExecProjectFunction_ init;fns;config;projectSpace;qdmx
      r←⍬
      (projectSpace config)←x
      :If 3=projectSpace.⎕NC init
          p'Executing the project''s initialising function "',(init~' '),'"...'
          :Select 1 2⊃projectSpace.⎕AT init
          :Case 0
              :Trap 0
                  projectSpace.⍎init
              :Else
                  qdmx←⎕DMX
                  p'*** Executing "init" crashed: ',qdmx.EM
              :EndTrap
          :CaseList 1 ¯2
              fns←projectSpace.⍎init
              :Trap 0
                  fns config
              :Else
                  qdmx←⎕DMX
                  p'*** Executing "init" crashed: ',qdmx.EM
              :EndTrap
          :Else
              p'  Invalid function valence: is ambivalent'
          :EndSelect
      :Else
          p'Could not execute "',init,'"; function not found'
      :EndIf
    ∇

    ∇ {msg}←ExecUserFunction config;fn;qdmx
    ⍝ Check whether the config parameter "ExecuteAfterProjectOpen" is set and execute it if it's a function.
      msg←''
      :If 0<≢fn←GetFunctionNameFromCiderConfigFile ⍬
          :If 1=1 1⊃⎕AT fn
              :Trap 0
                  ⍎'{}',fn,' config'
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "ExecuteAfterProjectOpen" crashed: ',qdmx.EM
              :EndTrap
          :Else
              :Trap 0
                  ⍎fn,' config'
              :Else
                  qdmx←⎕DMX
                  msg←'*** Executing "ExecuteAfterProjectOpen" crashed: ',qdmx.EM
              :EndTrap
          :EndIf
          :If 0=≢msg
              msg←'User function successfully executed'
          :EndIf
      :EndIf
    ∇

    ∇ {r}←InjectConfigDataIntoProject(config projectSpace_ folder)
    ⍝ Create a namespace "CiderConfig" inside projectSpace and populate it with the configuration data
      r←⍬
      'CiderConfig'projectSpace_.⎕NS config
      projectSpace_.CiderConfig.HOME←⊃,/1 ⎕NPARTS folder
    ∇

    ∇ {r}←{editFlag}ViewConfig path;filename;ns;orig;flag;edit;data
    ⍝ By default the contents of the file cider.config in "path" is put into the editor in read-only mode.
    ⍝ The user may edit the contents if ⍺ is 1 rather than anything else or undefined.
    ⍝ Returns 1 in case the file was modified and 0 otherwise.
      :Access Public Shared
      r←0
      editFlag←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'editFlag'
      :If '['∊path
          path←GetFolderFromAlias path
          ('Alias "',path,'" not found')Assert 0<≢path
      :EndIf
      :If 'cider.config'{⍺≡⎕C(-≢⍺)↑⍵}path
      :AndIf (¯1↑(-≢'cider.config')↓path)∊'/\'
          filename←path
      :Else
          filename←path,'/cider.config'
      :EndIf
      ('Does not exist: "',filename,'"')Assert ⎕NEXISTS filename
      ns←⍎'edit'(⍎(1+'⎕'=⊃⊃⎕XSI)⊃'#' '⎕SE').⎕NS''
      MassageConfig filename
      orig←ns.cider_config←⊃⎕NGET filename 1
      flag←0
      :Repeat
          ns.⎕ED⍠('ReadOnly'(~(⊂,1)≡⊂,editFlag))⊣'cider_config'
          :If orig≢ns.cider_config
          :AndIf editFlag
          :AndIf 0<≢(∊ns.cider_config)~' '
              :If CheckJsonSyntax ns.cider_config
                  data←⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣1↓∊(⎕UCS 10),¨⊆ns.cider_config
              :AndIf PerformConfigChecks data
                  (⊂ns.cider_config)⎕NPUT filename 1
                  r←flag←1
              :Else
                  :If ~1 YesOrNo'Syntax check failed. Try again? (no=changes are lost)'
                      flag←1
                  :EndIf
              :EndIf
          :Else
              flag←1
          :EndIf
      :Until flag
    ∇

    ∇ r←ListOpenProjects verboseFlag;res;aliases;ind
      :Access Public Shared
      '⍵ must be a Boolean'Assert(⊂verboseFlag)∊0 1
      r←(0(2+2×verboseFlag))⍴''
      res←⎕SE.Link.Status''
      :If 'No active links'≢res
          :If 0<≢res←(∧/'Namespace' 'Directory' 'Files'∊res[1;])↓res   ⍝ Will become superfluous with a proper Link API but don't do damage
              'Link demands a Resync!'Assert~∨/'Link.Resync required'⍷∊res
          :AndIf 0<≢res←({⊃9=⍵.⎕NC'CiderConfig'}∘⍎¨res[;1])⌿res
              r←res[;,1],({6::'' ⋄ ⍎⍵,'.CiderConfig.HOME'}¨res[;1])
              :If verboseFlag
                  r,←res[;3]
              :EndIf
              r←(0<≢¨r[;2])⌿r
              r[;2]←DropTrailingSlash¨r[;2]
              r[;2]←EnforceSlashInPath¨r[;2]
              :If verboseFlag
                  :If 0<≢aliases←GetAliasFileContent
                      aliases[;2]←DropTrailingSlash¨aliases[;2]
                  :AndIf 0<≢aliases←(aliases[;2]∊r[;2])⌿aliases
                      r,←⊂''
                      ind←r[;2]⍳aliases[;2]
                      r[ind;4]←aliases[;1]
                  :Else
                      r,←⊂''
                  :EndIf
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ r←GetMyUCMDsFolder
      :Access Public Shared
    ⍝ Returns standard path for Dyalog's MyUCMDs folder.
    ⍝ Works on all platforms but returns different results.\\
    ⍝ Under Windows typically:\\
    ⍝ `C:\Users\{⎕AN}\Documents\MyUCMDs\'  ←→ GetMyUCMDsFolder
      :If IsWindows
          r←(2 ⎕NQ'.' 'GetEnvironment' 'USERPROFILE'),'\Documents\MyUCMDs'
      :Else
          r←(2 ⎕NQ'.' 'GetEnvironment' 'Home'),'/MyUCMDs'
      :EndIf
    ∇

    ∇ r←GetAliasFileContent;filename;buff
      :Access Public Shared
      r←0 2⍴''
      filename←GetCiderAliasFilename
      :If ⎕NEXISTS filename
      :AndIf 0<≢buff←⊃⎕NGET filename 1
      :AndIf 0<≢buff←(0<≢¨buff)/buff
          r←↑{'='(≠⊆⊢)⍵}¨buff
          r[;1]←⎕C¨r[;1]
          r[;2]←EnforceSlashInPath¨r[;2]
          r[;2]←{⍵↓⍨¯1×(¯1↑⍵)∊'/\'}¨r[;2]
          r←r[⍋r[;1];]
      :EndIf
    ∇

    ∇ r←CloseProject y;list;project;bool
    ⍝ Simply breaks the Link between a project and its folder on disk.
    ⍝ In case ⍵ is empty ALL projects are closed.
    ⍝ `y` may be one of:
    ⍝ * Empty vector (=close all)
    ⍝ * A projectName like #.Foo
    ⍝ * An alias like [my-alias]
    ⍝ Returns the number of projects closed.
      :Access Public Shared
      r←0
      :If 0<≢list←ListOpenProjects 1
          :If ∧/'[]'∊y
              :If 0=+/bool←list[;4]≡¨⊂⎕C y~'[]'
                  :Return
              :Else
                  project←⊃(list[;4]≡¨⊂⎕C y~'[]')⌿list[;1]
              :EndIf
          :Else
              project←y
          :EndIf
          :If (⊂project)∊list[;1]
              {}⎕SE.Link.Break project
              r←1
          :ElseIf 0=≢⍕y
              {}{⎕SE.Link.Break ⍵}¨list
              r←≢list
          :EndIf
      :EndIf
    ∇

    ∇ yesOrNo←{default}YesOrNo question;isOkay;answer;add;dtb;answer2
      :Access Public Shared
    ⍝ Ask a simple question and allows just "Yes" or "No" as answers.
    ⍝ You may specify a default via the optional left argument which when specified
    ⍝ rules what happens when the user just presses <enter>.
    ⍝ `default` must be either 1 (yes) or 0 (no).
    ⍝ Note that this function does not work as expected when traced!
      isOkay←0
      default←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'default'
      isOkay←0
      :If 0≠≢default
          'Left argument must be a scalar'⎕SIGNAL 11/⍨1≠≢default
      :AndIf ~default∊0 1
          'The left argument. if specified, must be a Boolean or empty'⎕SIGNAL 11
      :EndIf
      :If 0=≢default
          add←' (y/n) '
      :Else
          :If default
              add←' (Y/n) '
          :Else
              add←' (y/N) '
          :EndIf
      :EndIf
      :If 1<≡question
          ((≢question)⊃question)←((≢question)⊃question),add
          question←⍪question
      :Else
          question←question,add
      :EndIf
      :Repeat
          ⍞←question
          answer←⍞
          :If answer≡question                        ⍝ Did...  (since version 18.0 trailing blanks are not removed anynmore)
          :OrIf (≢answer)=¯1+≢question               ⍝ ..the ...
          :OrIf 0=≢answer                            ⍝ ...user just...
              dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
              answer2←dtb answer
          :OrIf answer2≡((-≢answer2)↑(⎕UCS 10){~⍺∊⍵:⍵ ⋄ ' ',dtb ⍺{⌽⍵↑⍨1+⍵⍳⍺}⌽⍵}question)   ⍝ ...press <enter>?
              :If 0≠≢default
                  yesOrNo←default
                  isOkay←1
              :EndIf
          :Else
              answer←¯1↑{⍵↓⍨-+/∧\' '=⌽⍵}answer
              :If answer∊'YyNn'
                  isOkay←1
                  yesOrNo←answer∊'Yy'
              :EndIf
          :EndIf
      :Until isOkay
    ∇

    ∇ {msg}←ProcessAlias(folder alias);ciderAliasFilename;data;q;path;folder_;row;path_;ind
    ⍝ Takes a folder and an alias.
    ⍝ If the folder does not exist `msg` carries a corresponding message.
    ⍝ * If the alias is already defined with that folder no action is taken
    ⍝ * If the alias is already defined with a different folder the user is asked to confirm overwriting it
    ⍝ * If the alias is undefined yet it as added
    ⍝ * You cannot delete an alias with this function.
      :Access Public Shared
      ciderAliasFilename←GetCiderAliasFilename
      msg←''
      alias←⎕C alias~'[]'
      :If 0≠≢alias
      :AndIf 0<≢ciderAliasFilename
          :If ⎕NEXISTS ciderAliasFilename
              data←⊃⎕NGET ciderAliasFilename 1
              :If ~⎕NEXISTS folder
                  msg←'Could not find "',folder,'"'
              :ElseIf 0=+/(alias,'=')∘{⍺≡(≢⍺)↑⍵}¨data
                  ind←({⍵↓⍨⍵⍳'='}¨data)⍳⊂folder
                  :If ind≤≢data
                      DropAlias{⍵↑⍨¯1+⍵⍳'='}ind⊃data
                      data←⊃⎕NGET ciderAliasFilename 1
                  :EndIf
                  (⊂data,⊂(⎕C alias),'=',folder)⎕NPUT ciderAliasFilename 1
              :Else
                  data←↑{'='(≠⊆⊢)⍵}¨data
                  :If (⊂alias)∊data[;1]
                      row←data[;1]⍳⊂alias
                      path←2⊃data[row;]
                      (path folder)←EnforceSlashInPath¨path folder
                      :If IsWindows
                          (path_ folder_)←⎕C¨path folder
                      :Else
                          (path_ folder_)←path folder
                      :EndIf
                      (path_ folder_)←{⍵↓⍨-'/'=¯1↑⍵}¨path_ folder_
                      :If ≢/path_ folder_
                          q←'Alias [',alias,'] is already defined for:',CR,('   ',path),CR,'Overwrite?'
                          :If YesOrNo q
                              data[row;2]←⊂folder
                              data←⊃¨{⍺,'=',⍵}/¨↓data
                              (⊂data)⎕NPUT ciderAliasFilename 1
                          :Else
                              msg←'*** Alias "',alias,'" is already in use with a different path - alias not assigned'
                          :EndIf
                      :EndIf
                  :EndIf
              :EndIf
          :Else
              (⊂(⎕C alias),'=',folder)⎕NPUT ciderAliasFilename
          :EndIf
      :EndIf
    ∇

    ∇ {successFlag}←DropAlias alias;ciderAliasFilename;data;noOf
      :Access Public Shared
      ciderAliasFilename←GetCiderAliasFilename
      successFlag←FAILURE
      :If 0≠≢alias
      :AndIf 0<≢ciderAliasFilename
          :If ⎕NEXISTS ciderAliasFilename
              noOf←≢data←⊃⎕NGET ciderAliasFilename 1
              data←((⊆⎕C alias),¨'='){⍵/⍨~((⍵↑⍨¨⍵⍳¨'='))∊⍺}data
              :If noOf>≢data
                  (⊂data)⎕NPUT ciderAliasFilename 1
                  successFlag←SUCCESS
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ filename←GetCiderAliasFilename;folder
      :Access Public Shared
      filename←''
      :If 'W'=⊃1⊃'.'⎕WG'aplversion'
          :If 0=≢folder←⊃⎕SH'echo %APPDATA%'
              '%APPDATA% is undefined'⎕SIGNAL 11
          :Else
              folder,←'/.cider/'
          :EndIf
      :Else
          folder←(⊃⎕SH'echo $HOME'),'/.cider/'
      :EndIf
      1 ⎕MKDIR folder
      filename←folder,'aliase.txt'
    ∇

    ∇ r←RunTests path;configFilename;config
      :Access Public Shared
      r←''
      :If '['=1⍴path
          path←GetFolderFromAlias path
      :EndIf
      configFilename←path,'/cider.config'
      ('No file "cider.config" found in ',path)Assert ⎕NEXISTS configFilename
      config←Get_JSON5 configFilename
      :If 0<config.CIDER.⎕NC'tests'
      :AndIf 0<≢config.CIDER.tests
          :If (1⍴config.CIDER.tests~' ')∊'])'
              r←config.CIDER.tests,' ⍝ Execute this for running the test suite'
          :Else
              r←(config.CIDER.parent),'.',config.CIDER.projectSpace,'.',config.CIDER.tests,' ⍝ Execute this for running the test suite'
          :EndIf
      :EndIf
    ∇

    ∇ r←RunMake path;configFilename;config
      :Access Public Shared
      r←''
      :If '['=1⍴path
          path←GetFolderFromAlias path
      :EndIf
      configFilename←path,'/cider.config'
      ('No file "cider.config" found in ',path)Assert ⎕NEXISTS configFilename
      config←Get_JSON5 configFilename
      :If 0<config.CIDER.⎕NC'make'
      :AndIf 0<≢config.CIDER.make
          :If (1⍴config.CIDER.make~' ')∊'])'
              r←config.CIDER.make,' ⍝ Execute this for creating a new version'
          :Else
              r←(config.CIDER.parent),'.',config.CIDER.projectSpace,'.',config.CIDER.make,' ⍝ Execute this for creating a new version'
          :EndIf
      :Else
          ⎕←'>>> No expression found for creating a new version of <',config.CIDER.projectSpace,'>'
      :EndIf
    ∇

    ∇ filename←GetCiderConfigFilename;folder
    ⍝ Returns the name of the Cider config file.
    ⍝ As a side effect it creates the file with defaults if it does not yet exist.
      :Access Public Shared
      filename←''
      :If 'W'=⊃1⊃'.'⎕WG'aplversion'
          :If 0=≢folder←⊃⎕SH'echo %APPDATA%'
              '%APPDATA% is undefined'⎕SIGNAL 11
          :Else
              folder,←'/.cider/'
          :EndIf
      :Else
          folder←(⊃⎕SH'echo $HOME'),'/.cider/'
      :EndIf
      1 ⎕MKDIR folder
      filename←folder,'config.json'
      :If ~⎕NEXISTS filename
          filename ⎕NCOPY GetMyUCMDsFolder,'/Cider/.cider/config.json'
      :EndIf
    ∇

    ∇ parms←(fns GetFolderFromAlias2)parms;data;alias;msg;alias_;folder
    ⍝ Translates the alias in "folder" (if any) into a path from a parameter namespace.\\
    ⍝ If an alias is defined it is saved, possibly by overwriting the old one.
      :If '['∊parms.folder
          alias←parms.folder~'[]'
          folder←GetFolderFromAlias alias
          :If 0<≢folder
              parms.folder←folder
              :If 0=≢parms.alias
                  parms.alias←alias
              :EndIf
          :Else
              (alias,'" is not a valid alias')⎕SIGNAL 11
          :EndIf
      :EndIf
    ∇

    ∇ folder←GetFolderFromAlias alias;filename;data
    ⍝ Translates the alias in "folder" (if any) into a path.\\
    ⍝ In case the alias does not exist an empty vector is returned.\\
    ⍝ If an alias is defined it is saved, possibly by overwriting the old one.
      folder←''
      filename←GetCiderAliasFilename
      :If ⎕NEXISTS filename
          :If 0<≢data←⊃⎕NGET filename 1
              data←↑{'='(≠⊆⊢)⍵}¨data
              alias←⎕C alias~'[]'
              :If (⊂alias)∊data[;1]
                  folder←2⊃data[data[;1]⍳⊂alias;]
              :Else
                  ('"',alias,'" is not a valid alias')Assert(⎕NS'').{0=⎕NC ⍵}⎕C alias~'[]'
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ txt←DropTrailingSlash txt
      txt↓⍨←-'/\'∊⍨¯1↑txt
    ∇

    ∇ json←Get_JSON5 filename;config;flag;qdmx
      :If 0<≢json←⊃⎕NGET filename
          :Trap 11
              json←⎕JSON⍠('Dialect' 'JSON5')⊣json
          :Else
              qdmx←⎕DMX
              11 ⎕SIGNAL⍨'JSON import of <',filename,'> failed',{0=≢⍵:⍵⋄ ':'∊⍵:(¯1+⍵⍳':')↓⍵ ⋄ ': ',⍵} qdmx.Message
          :EndTrap
      :EndIf
      :If 0<json.⎕NC'CIDER'
          flag←0
          :If 0<json.CIDER.⎕NC'lx'  ⍝ Renamed from `lx` to `init` in 2022-07
              json.CIDER.init←json.CIDER.lx
              json.CIDER.⎕EX'lx'
              flag←1
          :EndIf
          :If 0=json.CIDER.⎕NC'tests'
              json.CIDER.tests←''
              flag←1
          :EndIf
          :If 0=json.CIDER.⎕NC'make'
              json.CIDER.make←''
              flag←1
          :EndIf
          :If flag
              config←⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣json
              (⊂config)⎕NPUT filename 1
          :EndIf
      :EndIf
    ∇

    ∇ {r}←config Put_JSON5 filename;json
      r←0
      json←⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣config
      (⊂json)⎕NPUT filename 1
    ∇

    BitsToInt←{(32⍴2)⊥⌽32↑⍵}

    IntToBits←{⌽(32⍴2)⊤⍵}

    ∇ functionName←GetFunctionNameFromCiderConfigFile dummy;filename;cfg
      functionName←''
      :If ⎕NEXISTS filename←GetCiderConfigFilename
          cfg←Get_JSON5 filename
      :AndIf 0<≢cfg
      :AndIf 2=cfg.⎕NC'ExecuteAfterProjectOpen'
      :AndIf 0<≢functionName←cfg.ExecuteAfterProjectOpen
          :If 3≠⎕NC functionName
              '"ExecuteAfterProjectOpen" is not a function, therefore not executed'
              functionName←''
              :Return
          :EndIf
          :If 1≠1 2⊃⎕AT functionName
              '"ExecuteAfterProjectOpen" is not a monadic function, therefore not executed'
              functionName←''
              :Return
          :EndIf
      :EndIf
    ∇

    ∇ flag←CheckJsonSyntax json
      :Trap 0
          {}⎕JSON⍠('Dialect' 'JSON5')('Compact' 0)⊣1↓∊(⎕UCS 10),¨⊆json
          flag←1
      :Else
          flag←0
      :EndTrap
    ∇

    ∇ path←AddSlash path
      path,←(~(¯1↑path)∊'/\')/'/'
    ∇

    ∇ r←IsWindows
      r←'Win'≡3↑⊃'.'⎕WG'APLVersion'
    ∇

    ∇ path←EnforceSlashInPath path;b
      :If 0<+/b←'\'=path
          (b/path)←'/'
      :EndIf
    ∇

    ∇ flag←CheckForAlreadyOpened projectSpace;activeLinks
    ⍝ Returns a 1 in case projectSpace is already opened, otherwise 0
      flag←0
      :If 2=⍴⍴activeLinks←⎕SE.Link.Status''
      :AndIf 0<≢activeLinks                                          ⍝ Maybe one day when Link has a real API...
          flag←(⊂⍕projectSpace)∊activeLinks[;1]
      :EndIf
    ∇

    ∇ successFlag←PerformConfigChecks config;buff;namespace;path
      successFlag←FAILURE
      :If 0=≢buff←config.CIDER.tatinFolder
          successFlag←SUCCESS
      :ElseIf '='∊buff
          :If 1<'='+.=buff
              successFlag←SUCCESS
          :Else
              (path namespace)←'='(≠⊆⊢)buff
              successFlag←(1+0=(⎕NS'').{⎕NC ⍵}namespace)⊃FAILURE SUCCESS
          :EndIf
      :ElseIf ~','∊buff
          successFlag←SUCCESS
      :Else
          ⍝ More than one but nothing assigned, that's invalid
      :EndIf
    ∇

    ∇ {changeFlag}←MassageConfig filename;config
    ⍝ Checks whether the config data comes with all expected antries.
    ⍝ If anything is missing (late arrivals) those are added.
    ⍝ Returns a 1 in case data was added, otherwise 0.
      changeFlag←0
      config←Get_JSON5 filename
      :If 0=config.CIDER.⎕NC'tests'
          config.CIDER.tests←''
          changeFlag∨←1
      :EndIf
     
      :If 0=config.CIDER.⎕NC'make'
          config.CIDER.make←''
          changeFlag∨←1
      :EndIf
      :If changeFlag
          config Put_JSON5 filename
      :EndIf
    ∇

    ∇ {r}←CheckTargetNamespaceForBeingEmpty(ref parms)
      r←0
      :If 0=parms.quietFlag
          :If 0<≢ref.⎕NL⍳16
          :AndIf YesOrNo'Target namespace "',(⍕ref),'" is not empty. Delete contents? (N = save contents to disk)'
              ref.⎕EX ref.⎕NL⍳16
          :EndIf
      :EndIf
    ∇
    ∇ msg←ReportPackageOrigins folder;data
    ⍝ Report where the package got installed from
      msg←''
      data←Get_JSON5 folder,'/apl-buildlist.json'
      msg←⊂'Packages were originally installed from:'
      msg,←'   '∘,¨∪data.url
    ∇

:EndClass
