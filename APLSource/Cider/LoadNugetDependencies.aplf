 list←x LoadNuGetDependencies(folder ns);NuGet;p;verbose;batch;cfg;nuGetFolder;list;data;attr;names;name;list2;targetNamespace;buff;dlls;assemblies;exported_namespaces;namespace;_dotnet_reflection
⍝ Load all NuGet dependencies from folder into `ns` (namspace).
⍝ Returns a list with the names of all loaded NuGet packages.
 (verbose batch)←2↑x,0
 list←''
 ('"',folder,'" is not a Cider project directory')Assert F.IsDir folder
 cfg←ReadProjectConfigFile folder
 nuGetFolder←folder,'/','dependencies'GetNuGetDependencies cfg
 targetNamespace←''
 :If '='∊buff←2⊃⎕NPARTS nuGetFolder
     targetNamespace←{⍵↓⍨⍵⍳'='}buff
     nuGetFolder←(-1+≢targetNamespace)↓nuGetFolder
 :EndIf
 :If F.IsDir nuGetFolder
 :AndIf 0<≢list2←F.ListFiles nuGetFolder,'/*.csproj'
     p←verbose batch∘{⍺ PrintToSession ⍵}
     :If 0=≢NuGet←FindNuGetAPI ⍬
         1 PrintToSession'Could not load NuGet packages due to missing API'
     :Else
         list←1⌷⍉↑NuGet.Packages nuGetFolder
         :If 2=⎕NC'ns'
             ns←⍎ns
         :EndIf
         '_dotnet'ns.⎕NS''
         :If 0<≢targetNamespace
             targetNamespace ns.⎕NS''
         :EndIf
         nuGetFolder←F.EnforceSlash nuGetFolder
         ns._dotnet.⎕USING←NuGet.Using nuGetFolder
         data←⎕XML⊃⎕NGET⊃list2
         attr←(data[;2]≡¨⊂'PackageReference')⌿data[;4]
         names←{2⊃⍵[⊃⍸⍵[;1]≡¨⊂'Include';]}¨attr
         _dotnet_reflection←⎕NS''
         _dotnet_reflection.⎕USING←'System.Reflection,System.Runtime.dll'
         dlls←¯1↓{¯1↑','(≠⊆⊢)⍵}¨ns._dotnet.⎕USING
         assemblies←_dotnet_reflection.Assembly.LoadFile¨dlls
         exported_namespaces←∪1⊃¨'.'(≠⊆⊢)¨⊃,/assemblies.GetExportedTypes.FullName
         :For namespace :In exported_namespaces
             :If 0=≢targetNamespace
                 ns.{⍎⍵,'←_dotnet.',⍵}namespace
             :Else
                 targetNamespace ns.{⍎⍺,'.',⍵,'←_dotnet.',⍵}namespace
             :EndIf
         :EndFor
     :EndIf
 :EndIf
