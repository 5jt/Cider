 r←level Help Cmd;ref;⎕TRAP
 r←''
 :Select level
 :Case 0
     :Select ⎕C Cmd
     :Case ⎕C'OpenProject'
         r,←⊂'Load all source files into the WS and keep it linked by default plus some more actions'
         r,←⊂']Cider.OpenProject [folder|alias] -projectSpace= -parent= -alias= -suppressInit -import -noPkgLoad -ignoreUserExec -watch=ns|dir|both -verbose -batch'
     :Case ⎕C'AddTatinDependencies'
         r,←⊂'Add one or more Tatin packages as dependencies'
         r,←⊂']Cider.AddTatinDependency [packages] [projectpath] -development -target='
     :Case ⎕C'AddNuGetDependencies'
         r,←⊂'Add one or more NuGet packages as dependencies'
         r,←⊂']Cider.AddNuGetDependencies [packages] [projectpath] -target='
     :Case ⎕C'ListNuGetDependencies'
         r,←⊂'List all NuGet dependencies'
         r,←⊂']Cider.ListNuGetDependencies [projectpath]'
     :Case ⎕C'ListNuGetTatinDependencies'
         r,←⊂'List all Tatin dependencies'
         r,←⊂']Cider.ListTatinDependencies [projectpath]'
     :Case ⎕C'ListOpenProjects'
         r,←⊂'List all opened projects'
         r,←⊂']Cider.ListOpenProjects -verbose'
     :Case ⎕C'ListAliases'
         r,←⊂'List all defined aliases with their folders'
         r,←⊂']Cider.ListAliases -prune -edit -batch'
     :Case ⎕C'CreateProject'
         r,←⊂'Make given folder a project folder'
         r,←⊂']Cider.CreateProject <folder> [<project-namespace>] -alias= -acceptConfig -noEdit -batch -ignoreUserExec'
     :Case ⎕C'CloseProject'
         r,←⊂'Break the Link between one or more project spaces and their associated files on disk'
         r,←⊂']Cider.CloseProject [<namespace-name>|alias-name] -all -fast'
     :Case ⎕C'Help'
         r,←⊂'Put the HTML help files on display'
         r,←⊂']Cider.Help'
     :Case ⎕C'ProjectConfig'
         r,←⊂'Put the config file of a project on display'
         r,←⊂']Cider.ProjectConfig [path] -edit'
     :Case ⎕C'RunTests'
         r,←⊂'Print the project''s specific statements to the session that will run the test suite'
     :Case ⎕C'Make'
         r,←⊂'Print the project''s specific statements to the session that will create a new version ("Make")'
     :Case ⎕C'UpdateCider'
         r,←⊂'Attempt to update the currently running version of Cider'
         r,←⊂']Cider.UpdateCider'
     :Case ⎕C'Config'
         r,←⊂'Allow the user to edit one or both of Cider''s config files'
         r,←⊂']Cider.Config -print'
     :Case ⎕C'Version'
         r,←⊂'Return name, version number and version date as a three-element vector'
         r,←⊂']Cider.Version'
     :EndSelect
     :If ~(⊂⎕C Cmd)∊⎕C'Version' 'Help'
         r,←''(']Cider.',Cmd,' -?? ⍝ Enter this for more information ')
     :EndIf
 :Case 1
     :Select ⎕C Cmd
     :Case ⎕C'OpenProject'
         r,←⊂'Takes a path to a folder that must host a file "',configFilename,'" or a pre-defined alias.'
         r,←⊂'The config file must specify all variables required by Cider, including "source".'
         r,←⊂'The contents of "source" is then linked to "parent.projectSpace" by default.'
         r,←⊂'If no folder or alias is specified, Cider will present a list with all defined aliases.'
         r,←⊂''
         r,←⊂'An alias must be embraced by square brackets, for example:'
         r,←⊂'    ]Cider.OpenProject [alias]'
         r,←⊂'The "*" wildcard is supported, but only at the end. The following statement will list all'
         r,←⊂'projects that start their names with "A"'
         r,←⊂'    ]Cider.OpenProject [A*]'
         r,←⊂''
         r,←⊂'-parent         The project is loaded into Cider.(parent.projectSpace) unless this is (temporarily)'
         r,←⊂'                overwritten by setting the -parent= and/or the -projectSpace= option(s).'
         r,←⊂'-projectSpace   The project is loaded into Cider.(parent.projectSpace) unless this is (temporarily)'
         r,←⊂'                overwritten by setting the -projectSpace= and/or the -parent= option(s).'
         r,←⊂'-import         By default the namespace is linked to folder. By specifying the -import'
         r,←⊂'                flag this can be avoided: the code is then loaded into the workspace with the'
         r,←⊂'                Link.Import method, meaning that changes are not tracked.'
         r,←⊂'                With -import the status of neither Git nor any installed Tatin packages is checked.'
         r,←⊂'-alias=         In case you are going to work on a project frequently you may specify -alias=name '
         r,←⊂'                for quicker access: rather than a path you can then specify just the [alias].'
         r,←⊂'                Note that aliases are not case sensitive.'
         r,←⊂'                (In order to remove an alias use ]Cider.ListAliases -edit)'
         r,←⊂'-noPkgLoad      By default the Tatin packages from the installation folder(s) defined in the'
         r,←⊂'                config file will be loaded. If you don''t want this specify -noPkgLoad'
         r,←⊂'-watch          Defaults to "both" (if .NET is available) but may be "ns" or "dir" instead when Link 3'
         r,←⊂'                is around. With Link 4 and later this is left to Link.'
         r,←⊂'                * "ns" means that changes in the workpace are saved on disk'
         r,←⊂'                * "dir" means that any changes on disk are brought into the WS'
         r,←⊂'                * "both" means that any changes in either "ns" or "dir" are reflected accordingly'
         r,←⊂'                   However, currently "both" works only under Windows.'
         r,←⊂'                   Note that the flag does NOT change the config file on disk'
         r,←⊂'                Refer to the Link documentation for details.'
         r,←⊂'-verbose        If this is specified then Cider reports every single step it carries out.'
         r,←⊂'-ignoreUserExec Suppress execution of a user function defined in Cider''s config file once'
         r,←⊂'-batch          Does not print to the session and prevents user interaction. In a situation were'
         r,←⊂'                user must decide what to do an error is thrown.'
     :Case ⎕C'AddNuGetDependencies'
         r,←⊂'Requires one mandatory argument: a comma-separated list of NuGet packages to be installed.'
         r,←⊂''
         r,←⊂'The second argument is optional. If it is omitted, Cider acts on any open project, or lets the'
         r,←⊂'user select in case there is more than one project open.'
         r,←⊂''
         r,←⊂'If the second argument is specified it must be one of:'
         r,←⊂'* A project [alias]'
         r,←⊂'* A path pointing to a Cider project'
         r,←⊂''
         r,←⊂'In case the project''s config file does not carry a definition for a NuGet dependency folder'
         r,←⊂'the user is given the oportunity to edit the config file.'
         r,←⊂''
         r,←⊂'-target=  Use this to specify a target namespace. This is added to the "dependencies" or the'
         r,←⊂'          "dependencies_dev" parameter with a "=". If there is already such a target namespace'
         r,←⊂'          an error is thrown; you need to edit the project''s config file in such a case.'
     :Case ⎕C'AddTatinDependencies'
         r,←⊂'Requires one mandatory argument: a comma-separated list of Tatin packages to be installed.'
         r,←⊂''
         r,←⊂'The second argument is optional. If it is omitted, Cider acts on any open project, or lets the'
         r,←⊂'user select a project in case there is more than one open.'
         r,←⊂''
         r,←⊂'If the second argument is specified it must be one of:'
         r,←⊂'* A project [alias]'
         r,←⊂'* A path pointing to a Cider project'
         r,←⊂''
         r,←⊂'In case the project''s config file does not carry a definition for a Tatin dependency folder'
         r,←⊂'the user is given the oportunity to edit the config file.'
         r,←⊂''
         r,←⊂'-development  By default the packages are added as project dependencies. The -development'
         r,←⊂'              flag can be used to make them development dependencies instead.'
         r,←⊂'-target=      Use this to specify a target namespace. This is added to the "dependencies" or the'
         r,←⊂'              "dependencies_dev" parameter with a "=". If there is already such a target namespace'
         r,←⊂'              an error is thrown; you need to edit the project''s config file in such a case.'
     :Case ⎕C'ListNuGetDependencies'
         r,←⊂'Lists all NuGet dependencies in the Nuget dependency folder.'
         r,←⊂''
         r,←⊂'Takes a path to a project or a project alias as (optional) argument.'
         r,←⊂'If no argument is provided the command looks for open Cider projects.'
     :Case ⎕C'ListTatinDependencies'
         r,←⊂'Lists all Tatin packages in all install folders of a given project'
         r,←⊂''
         r,←⊂' * If no argument is provided a list with all open projects is presented to the user, unless'
         r,←⊂'   there is only one open anyway.'
         r,←⊂' * If an argument is provided then it must be one of:'
         r,←⊂'   * folder of a Cider-managed project'
         r,←⊂'   * an alias of a Cider-managed porject'
         r,←⊂''
         r,←⊂'The package install folder(s) are established from Cider''s config file.'
         r,←⊂''
         r,←⊂'The main purpose of this user command is to check whether the packages got installed from the'
         r,←⊂'desired Tatin Registries, but check the -full flag'
         r,←⊂''
         r,←⊂'-full  Results in a hierarchical report on all dependencies. This does not give what is actually'
         r,←⊂'       used, it gives you what the packaged themselves requires. Due to minimum version selection'
         r,←⊂'       they might end up using a later version.'
         r,←⊂'       This can be useful to figure out why a particular (typically old) package is required.'
         r,←⊂'-raw   By default beautified data is displayed. With -raw you get just the pure data.'
     :Case ⎕C'Config'
         r,←⊂'Puts the content of Cider''s global config file into the editor and allows the user to change it.'
         r,←⊂'By specifying the -print flag you can force the user command to print the content of the file'
         r,←⊂'to the session rather than putting it into ⎕ED.'
         r,←⊂''
         r,←⊂'You may change the data, but those changes will only be written to the file if you confirm that.'
         r,←⊂'Note that changing the config file does not affect the currently running instance of Cider.'
     :Case ⎕C'ListOpenProjects'
         r,←⊂'Prints a list with the namespaces of all currently opened projects.'
         r,←⊂'Add the -verbose flag for more information. Then a matrix is returned with these columns:'
         r,←⊂' [;1] Namespace name'
         r,←⊂' [;2] Path'
         r,←⊂' [;3] Number of objects in the project'
         r,←⊂' [;4] Alias name (if any)'
     :Case ⎕C'ListAliases'
         r,←⊂'Print all defined aliases together with their folders.'
         r,←⊂''
         r,←⊂'There are two mutually exclusive options available:'
         r,←⊂'-edit   Cider will allow you to edit the file that keeps the alias information'
         r,←⊂'-prune  Cider will delete all aliases for which their folders cannot be found'
         r,←⊂''
         r,←⊂'-batch  When -prune is specified the user will be asked for confirmation in case there'
         r,←⊂'        is something to prune at all. You prevent this by specifying this flag.'
         r,←⊂'        All reporting to the session will then be suppressed as well.'
     :Case ⎕C'CreateProject'
         r,←⊂'Requires a path to a folder ("source") that is about to become a project.'
         r,←⊂''
         r,←⊂'You might also specify a namespace. If no namespace is provided then the name of the namespace'
         r,←⊂'is derived from the path. If the namespace does not yet exist it will be created.'
         r,←⊂'The namespace will be LINKed to "source", and a namespace CiderConfig, holding the configuration'
         r,←⊂'data, will be injected into the namespace.'
         r,←⊂'For a root project (the whole of #, NOT recommended) you must specify # as 2nd argument.'
         r,←⊂''
         r,←⊂' * Creates a file "',configFilename,'" in that folder'
         r,←⊂' * Lets the user edit that file and makes sure that all mandatory settings are specified correctly'
         r,←⊂' * In case an alias is specified the alias is saved'
         r,←⊂' * Finally it attempts to open the new project'
         r,←⊂''
         r,←⊂'If no path is specified it acts on the current directory, but in that case the user'
         r,←⊂'is prompted for confirmation to avoid mishaps.'
         r,←⊂''
         r,←⊂'-acceptConfig:  By default a file cider.config is created, and an error is thrown in'
         r,←⊂'                case it already exists. You can use -acceptConfig to force CreateProject'
         r,←⊂'                to accept an already existing config file.'
         r,←⊂'-noEdit:        With -noEdit you can prevent the user from being asked to edit the config file.'
         r,←⊂'-alias:         In case you are going to work on the new project frequently you may specify'
         r,←⊂'                -alias=name; from then on you can use the [alias] rather than the path.'
         r,←⊂'                Note that aliases are not case sensitive.'
         r,←⊂'-batch          After a project has been created successfully, the user will be asked whether'
         r,←⊂'                she wants to open the project as well. You can enforce that without the user'
         r,←⊂'                being interrogated by setting the -batch flag. Mainly useful for test cases and'
         r,←⊂'                and possibly an automated build process.'
         r,←⊂'-ignoreUserExec Suppress execution of a user function defined in Cider''s config file on this occasion'
         r,←⊂'                You don''t want to run a general user function in test suite, for example.'
     :Case ⎕C'CloseProject'
         r,←⊂'Breaks the Link between one or more projects and their associated files on disk.'
         r,←⊂''
         r,←⊂'You may specify one of:'
         r,←⊂' 1. One or more projects via a fully qualified namespace name'
         r,←⊂' 2. One or more projects via an [alias]'
         r,←⊂' 3. One or more projects via project path(s)'
         r,←⊂' 4. A mixture of 1, 2 and 3'
         r,←⊂' 5. Nothing; if only one project is open it will be closed.'
         r,←⊂'    If multiple projects are opened a list will be presented to the user'
         r,←⊂' 6. The -all flag, which closes all projects without further ado'
         r,←⊂''
         r,←⊂'Multiple projects must be separated by spaces or by commas.'
         r,←⊂''
         r,←⊂' * In case a particular project was specified, a Boolean is reported, 1 indicating success'
         r,←⊂' * Otherwise the closed projects are reported in detail'
         r,←⊂''
         r,←⊂'-fast  Use this to tell CloseProject that is should not perform any checks, see global Cider'
         r,←⊂'       config parameter `CheckForDropboxConflicts`.'
     :Case ⎕C'ProjectConfig'
         r,←⊂'Puts the config file of a project on display.'
         r,←⊂'By specifying the -edit flag the user might edit the file rather then just viewing it.'
         r,←⊂''
         r,←⊂'The optional parameter must be the path to a folder holding a cider.config file (a project).'
         r,←⊂'In case no path is provided Cider will present all currently opened projects to the user for'
         r,←⊂'selecting one, except when there is only one project open anyway.'
     :Case ⎕C'RunTests'
         r,←⊂'Prints the statement to the session that is designed to run the project''s test cases, if any.'
         r,←⊂''
         r,←⊂'The optional parameter must be the path to a folder holding a cider.config file (a project).'
         r,←⊂'In case no path is provided Cider will present all currently opened projects to the user for'
         r,←⊂'selecting one, except when there is only one project open anyway.'
     :Case ⎕C'Make'
         r,←⊂'Prints the statement to the session that is designed to run the project''s "make" function, if any.'
         r,←⊂''
         r,←⊂'The optional parameter must be the path to a folder holding a cider.config file (a project).'
         r,←⊂'In case no path is provided, Cider will present all currently opened projects to the user for'
         r,←⊂'selecting one, except when there is only one project open anyway.'
     :Case ⎕C'UpdateCider'
         r,←⊂'Checks whether there is a later version of Cider available.'
         r,←⊂'If there is no later version this is reported.'
         r,←⊂'Otherwise the user will be asked whether she wants to update to the new version.'
         r,←⊂'The update is performed automatically though the current WS will stay on the old version.'
     :Case ⎕C'Help'
         r,←⊂'Cider comes with two HTML files with documentation. This user command offers to put'
         r,←⊂'one or both of them on display in the default browser.'
     :EndSelect
 :Case 2
     r,←⊂'There is no additional help available'
 :EndSelect
