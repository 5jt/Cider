{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Cider","text":"<p>Cider is a project manager for Dyalog APL.</p> <p></p> <p>If you write software for others to use Cider helps you manage</p> <ul> <li>the software you publish</li> <li>the files you make it from</li> <li>any imported packages it depends on</li> <li>the versions you produce</li> </ul>"},{"location":"#when-you-open-a-project","title":"When you open a project","text":"<p>Cider creates its namespace (project space) in the active workspace then</p> <ul> <li>defines its APL objects in the project space, linked to their source files</li> <li>loads its Tatin and NuGet packages</li> <li>executes the project\u2019s initialisation function</li> <li>executes your global initialisation function</li> <li>displays the project\u2019s to-do list and Git status</li> </ul> <p>More details \u2026</p> <p>You use Cider through its user commands or its API functions.</p> <p>Related tools</p> <p>Cider cooperates with</p> <ul> <li>Link, which maintains the source of Dyalog APL objects as text files</li> <li>Tatin, the community APL package manager</li> <li>NuGet, the package manager for .NET</li> <li>Git, a source-control manager<sup>1</sup></li> <li>Dropbox, a file-sharing service</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li>Dyalog Unicode Edition version 18.2 or better</li> <li>Your APL source kept in text files</li> <li>Tatin version 0.116.0 or better</li> </ol> <p>Dyalog v19.0 has Cider and Tatin installed. For Dyalog v18.2, Cider and Tatin have to be installed.</p>"},{"location":"#glossary","title":"Glossary","text":"alias A short name for a project, used as an alternative to the project path. Aliases are not case sensitive. flag <p>The meaning depends on context:</p> <ul> <li>In the API or configuration, a boolean; a flag is \u2018set\u2019 with 1.</li> <li>In the user commands, a parameter without a corresponding value: for example in <code>]CIDER.OpenProject path/2/project -watch</code>, the <code>watch</code> flag is set.</li> </ul> list of strings A nested vector of strings, e.g. <code>'quick' 'brown' 'fox'</code> parameter namespace A namespace of variables representing parameters project folder Where the project is defined in the filesystem project space The namespace in which Cider builds the project project path The filesystem path to the project folder string A simple character vector, e.g. <code>'quick'</code>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Cider is developed from more than a decade of earlier work, primarily by Phil Last and Paul Mansour on the Acre source-code manager.</p> <ol> <li> <p>Cider is designed to work with the popular Git source control manager,  but can be used with others.\u00a0\u21a9</p> </li> </ol>"},{"location":"api/","title":"API functions","text":"<p>With the Cider API you can write DevOps scripts in APL.</p> <p>The API functions are similar to the user-commands, but not identical. Not all have equivalent user commands.</p> <p>AddAlias GetMyUCMDsFolder AddNuGetDependencies GetNuGetDependencies AddTatinDependencies GetProgramFilesFolder CloseProject GetTatinDependencies CreateCreateProjectParms HasDotNet CreateOpenParms ListNuGetDependencies CreateProject ListOpenProjects DropAlias ListTatinDependencies GetCiderAliasFileContent OpenProject GetCiderAliasFilename ProjectConfig GetCiderGlobalConfigFileContent ReadProjectConfigFile GetCiderGlobalConfigFilename WriteProjectConfigFile GetCiderGlobalConfigHomeFolder Version</p> <p>Unlike user commands, API function names are case-sensitive.</p> <p>The API is exposed in <code>\u2395SE.Cider</code> so, for example, call <code>AddAlias</code> as <code>\u2395SE.Cider.AddAlias</code>.</p> API code cache <p>The Cider code package is loaded into <code>\u2395SE._Cider</code>, but the API is exposed via <code>\u2395SE.Cider</code>.</p> <p>Do not call functions in <code>\u2395SE._Cider</code>.</p>"},{"location":"api/#add-alias","title":"Add alias","text":"<pre><code>{r}\u2190AddAlias(projectpath alias)\n</code></pre> <p>Where</p> <ul> <li><code>projectpath</code> is a project path</li> <li><code>alias</code> is a string with no punctuation or spaces</li> </ul> <p>if the project folder exists the alias is registered in the file returned by <code>GetCiderAliasFilename</code>. The shy result is an error message, empty if successful.</p> <p>If the alias is already in use Cider asks you to confirm the change.</p>"},{"location":"api/#add-nuget-dependencies","title":"Add NuGet dependencies","text":"<pre><code>list\u2190AddNuGetDependencies(packages project)\n</code></pre> <p>Where</p> <ul> <li><code>packages</code>is one or more NuGet packages</li> <li><code>project</code> is an alias or project path</li> </ul> <p>Cider installs NuGet packages in the (single) NuGet dependency folder defined in the project config and returns their names as a list of strings.</p> <p>Specify <code>packages</code> as either a list of strings or a comma-separated string.</p> <p>NuGet package names</p> <p>NuGet package names are not case sensitive when they are loaded so, for example, you can load <code>Clock</code> by the name <code>clock</code>.</p> <p>However, the correct name is returned, and is required for using a package.</p> <p> <code>]CIDER.AddNugetDependencies</code></p>"},{"location":"api/#add-tatin-dependencies","title":"Add Tatin dependencies","text":"<pre><code>r\u2190AddTatinDependencies(packages project dev)\n</code></pre> <p>Where</p> <ul> <li><code>packages</code> is one or more Tatin packages</li> <li><code>project</code> is a project path</li> <li><code>dev</code> is a flag</li> </ul> <p>Cider installs the packages in one of the Tatin dependency folders and returns as a list of strings the names of the packages installed.</p> <p>Specify <code>packages</code> as either a list of strings or a comma-separated string.</p> <p>Any errors are reported to the session.</p> <p>Setting the <code>dev</code> flag switches the installation folder from <code>dependencies</code> (default) to<code>dependencies_dev</code>.</p> <pre><code>      pkgs\u2190'rikedyp-TinyTest,boobly-boo'\n      proj\u2190'/Users/sjt/Projects/dyalog/examples/stat'\n      \u2374\u2395\u2190\u2395SE.Cider.AddTatinDependencies pkgs proj 1\nNot found: boobly-boo\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502rikedyp-TinyTest-1.0.1\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n1\n</code></pre> Dependency folders <p>The dependency folders are defined in the project\u2019s configuration file.</p> <p>The default project configuration file name is <code>dependencies.tatin</code>.</p> <p> <code>]CIDER.AddTatinDependencies</code>.</p>"},{"location":"api/#close-project","title":"Close project","text":"<pre><code>r\u2190{performChecks} CloseProject projects\n</code></pre> <p>Where</p> <ul> <li><code>performChecks</code> (optional) is whether to check for Dropbox conflicts (default is 1)</li> <li><code>projects</code> is<ul> <li>one or more open projects</li> <li>an empty vector (all open projects)</li> </ul> </li> </ul> <p>Cider closes the projects (unlinks the source files) and returns the number of projects closed.</p> <p>Identify projects as (any of)</p> <ul> <li>fully qualified namespace names</li> <li>aliases</li> <li>project paths</li> </ul> <p>Example: close all open projects. <pre><code>\u2395SE.Cider.CloseProject \u236c\n</code></pre> Example: close three projects without checking for Dropbox conflicts. <pre><code>0 \u2395SE.Cider.CloseProject 'path/to/project' #.util '[test]'\n</code></pre></p> <p> <code>CheckForDropboxConflicts</code> <code>]CIDER.CloseProject</code></p>"},{"location":"api/#create-createproject-parms","title":"Create <code>CreateProject</code> parms","text":"<pre><code>parms\u2190{parms} CreateCreateProjectParms folder\n</code></pre> <p>Where</p> <ul> <li><code>parms</code> (optional) is a namespace of parameters</li> <li><code>folder</code> is a project path</li> </ul> <p>Cider returns a namespace with parameters required by <code>CreateProject</code>, by default:</p> <pre><code>acceptConfig   - 0\nfolder         - project path\nignoreUserExec - 0\nnamespace      - name of the project folder\n</code></pre> <p>Defaults are overwritten by any specified in the <code>parms</code> argument.</p> <p> <code>]CIDER.CreateProject</code></p>"},{"location":"api/#create-open-parms","title":"Create Open parms","text":"<pre><code>parms\u2190CreateOpenParms y\n</code></pre> <p>Where <code>y</code> is either an empty vector or a namespace of parameters, returns a namespace of parameters required by the <code>OpenProject</code> function.</p> <p>Parameters in <code>y</code> overwrite the defaults, which are:</p> <pre><code>alias                 ''\nbatch                 0\ncheckPackageVersions  \u236c\nfolder                ''\nignoreUserExec        0\nimportFlag            0\nnoPkgLoad             0\nparent                ''\nprojectSpace          ''\nquietFlag             0\nsuppressInit          0\nverbose               0\nwatch                 0\n</code></pre> <p>Setting <code>watch</code> to 0 shows Cider you have not set it. Eventually 0 becomes <code>both</code>, the default.</p>"},{"location":"api/#create-project","title":"Create project","text":"<pre><code>r\u2190CreateProject parms\n</code></pre> <p>Where <code>parms</code> is a namespace of parameter values, typically the result of <code>CreateCreateProjectParms</code>, Cider creates a project.</p> <p> <code>]CIDER.CreateProject</code></p>"},{"location":"api/#drop-alias","title":"Drop alias","text":"<pre><code>{flag}\u2190DropAlias alias\n</code></pre> <p>Where <code>alias</code> is a project alias, Cider removes it from the file named by <code>GetCiderAliasFilename</code> and returns a flag indicating success.</p>"},{"location":"api/#get-alias-file-content","title":"Get alias file content","text":"<pre><code>r\u2190{filename} GetCiderAliasFileContent dummy\n</code></pre> <p>Cider ignores <code>dummy</code> and returns as a matrix of strings the contents of the file named by <code>GetCiderAliasFilename</code>.</p> <pre><code>      \u2374\u2395\u2190\u2395SE.Cider.GetCiderAliasFileContent 'blah'\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502bar\u2502/Users/sjt/tmp/foo\u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n1 2\n</code></pre> <p>If the file is empty the result has zero rows.</p> <p> <code>]CIDER.ListAliases</code></p>"},{"location":"api/#get-alias-filename","title":"Get alias filename","text":"<pre><code>filename\u2190GetCiderAliasFilename\n</code></pre> <p>Returns the path to the file used to record alias names and their paths.</p>"},{"location":"api/#get-global-config-file-content","title":"Get global config file content","text":"<pre><code>parms\u2190GetCiderGlobalConfigFileContent\n</code></pre> <p>Cider returns the global config \u2013 if found \u2013 as a parameter namespace; otherwise the result is <code>\u236c</code>.</p> <p> <code>]CIDER.Config</code></p>"},{"location":"api/#get-global-config-filename","title":"Get global config filename","text":"<pre><code>path\u2190GetCiderGlobalConfigFilename\n</code></pre> <p>Returns the path to Cider\u2019s global config file.</p>"},{"location":"api/#get-global-config-home-folder","title":"Get global config home folder","text":"<pre><code>path\u2190GetCiderGlobalConfigHomeFolder\n</code></pre> <p>Returns the path to the parent folder of Cider\u2019s global config file.</p> <p>On Windows, this is typically <code>C:/Users/&lt;\u2395AN&gt;/.cider/config.json</code></p>"},{"location":"api/#get-myucmds-folder","title":"Get MyUCMDs folder","text":"<pre><code>path\u2190GetMyUCMDsFolder\n</code></pre> <p>Returns the path to the <code>MyUCMDs/</code> folder.</p> <p>The folder might not exist  </p> <p>On Windows, this folder is created by the installer. Not so on other platforms.</p>"},{"location":"api/#get-nuget-dependencies","title":"Get NuGet dependencies","text":"<pre><code>r\u2190name GetNuGetDependencies config\n</code></pre> <p>Where</p> <ul> <li><code>name</code> is <code>'development'</code> or <code>'development_dev'</code></li> <li><code>config</code> is a parameter namespace</li> </ul> <p>returns either the value of <code>nuget</code> in the given branch or an empty vector if <code>nuget</code> is not defined.</p> <p>The <code>config</code> argument is typically derived from a project\u2019s configuration file.</p> <p> <code>]CIDER.ListNuGetDependencies</code></p>"},{"location":"api/#get-program-files-folder","title":"Get Program Files folder","text":"<pre><code>path\u2190{current}GetProgramFilesFolder suffix\n</code></pre> <p>Where</p> <ul> <li><code>current</code> (optional) is a flag</li> <li><code>suffix</code> is a suffix to the folder filepath</li> </ul> <p>returns the path to the Dyalog files folder with any <code>suffix</code> specified.</p> <p>The <code>current</code> flag (default 0) specifies whether the result is specific to the currently running version of Dyalog.</p> <pre><code>      \u235d Version agnostic\n      \u2395SE.Cider.GetProgramFilesFolder ''\nC:\\Users\\kai\\Documents\\Dyalog APL Files\n      Cider.GetProgramFilesFolder 'CiderTatin'\nC:\\Users\\kai\\Documents\\Dyalog APL Files/CiderTatin\n\n      \u235d Version specific\n      1 \u2395SE.Cider.GetProgramFilesFolder ''\nC:\\Users\\kai\\Documents\\Dyalog APL-64 18.2 Unicode Files\n</code></pre>"},{"location":"api/#get-tatind-dependencies","title":"Get TatinD dependencies","text":"<pre><code>r\u2190name GetTatinDependencies config\n</code></pre> <p>Where</p> <ul> <li><code>name</code> is <code>'development'</code> or <code>'development_dev'</code></li> <li><code>config</code> is a parameter namespace</li> </ul> <p>returns either the value of <code>tatin</code> in the given branch or an empty vector if <code>tatin</code> is not defined.</p> <p>The <code>config</code> argument is typically derived from the project config.</p>"},{"location":"api/#has-dotnet","title":"Has DotNet","text":"<pre><code>flag\u2190HasDotNet\n</code></pre> <p>Result indicates whether .NET Core or .NET is available and the bridge DLL was successfully loaded.</p>"},{"location":"api/#list-nuget-dependencies","title":"List NuGet dependencies","text":"<pre><code>r\u2190ListNuGetDependencies projectPath\n</code></pre> <p>Where <code>projectPath</code> is a project path, returns a matrix of names and versions of its NuGet dependencies.</p>"},{"location":"api/#list-open-projects","title":"List open projects","text":"<pre><code>r\u2190ListOpenProjects verbose\n</code></pre> <p>Where <code>verbose</code> is a flag, returns the open projects as a matrix of 2 or 4 columns:</p> <ol> <li>Fully qualified project namespace</li> <li>Path the project was loaded from</li> <li>Number of objects belonging to the project</li> <li>Alias (if any)</li> </ol> <pre><code>      \u2395SE.Cider.ListOpenProjects 0\n #.Cider  /path/to/Cider\n\n      \u2395SE.Cider.ListOpenProjects 1\n #.Cider  /path/to/Cider  32  cider\n</code></pre> <p> <code>]CIDER.ListOpenProjects</code>.</p>"},{"location":"api/#list-tatin-dependencies","title":"List Tatin dependencies","text":"<pre><code>r\u2190ListTatinDependencies projectpath\n</code></pre> <p>Where <code>projectpath</code> is a project path, returns as a 5-column matrix the dependencies installed in the Tatin installation folders.</p> <ol> <li>dependency folder</li> <li>full package ID</li> <li>flag: whether the package is a principal or a dependency</li> <li>URL from which the package was loaded</li> <li>(reserved)</li> </ol> <pre><code>      \u2349r\u2190\u2395SE.Cider.ListTatinDependencies '[stat]'\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502tatin-dependencies/\u2502tatin-dependencies_dev/\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 davin-Tester-1.1.0\u2502 rikedyp-TinyTest-1.0.1\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021                  \u25021                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502https://tatin.dev/ \u2502https://tatin.dev/     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   \u2502                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      r[;5]\u2261' ' ' '\n1\n</code></pre> <p>Until Cider version 0.34.0 this was named <code>ListTatinPackages</code></p> <p> <code>]CIDER.ListTatinDependencies</code>.</p>"},{"location":"api/#open-project","title":"Open project","text":"<pre><code>(flag log)\u2190OpenProject y\n</code></pre> <p>Where <code>y</code> is either</p> <ul> <li>an alias or project path</li> <li>a parameter namespace (typically created by  <code>CreateOpenParms</code>)</li> </ul> <p>Cider opens the project, and returns a 2-item result: a flag for success, and a log string as printed to the session.</p> <pre><code>      (flag log)\u2190\u2395SE.Cider.OpenProject '[stat]'\nThe current directory is now ...\n      flag\n1\n      (\u2261log)(\u2262log)\n1 388\n</code></pre> <p>If <code>y</code> is a parameter space, all parameters are optional except <code>folder</code>.</p> <code>folder</code> <p>String. Alias or project path. May not be empty, but could be <code>./</code> indicating the current directory.</p> <code>alias</code> <p>String. An alias by which you can refer to the project.</p> <p>Special syntax for alias</p> <p>If <code>alias</code> is just a dot, the name of the project folder becomes the alias. Example:</p> <pre><code>p\u2190\u2395SE.Cider.CreateOpenParms\np.folder\u2190'/path/2/projects/foo'\np.alias\u2190'.'  \u235d `foo` becomes the (new) alias\n</code></pre> <p>Side effect Cider will register the new alias for the project.</p> <p>Example: Open project aliased as <code>foo</code> and reregister its alias as <code>bar</code>: <pre><code>p\u2190\u2395SE.Cider.CreateOpenParms\np.folder\u2190'[foo]'\np.alias\u2190'bar'\n</code></pre></p> <code>checkPackageVersions</code> <p>By default Cider proposes to check principal packages for later versions and, if found, to update them.</p> <pre><code>\u236c - Ask me whether to check (default)\n0 - Do not check at all\n1 - Check and report findings but prompt for updating\n2 - Check and update without consulting me\n</code></pre> <p>This parameter is ignored if the project has no Tatin installation folder, or if <code>importFlag</code> is set.</p> <code>ignoreUserExec</code> <p>Flag to stop Cider executing at the end of opening a project a function named in the global  <code>ExecuteAfterProjectOpen</code> setting. Defaults to 0.</p> <code>importFlag</code> <p>Flag to stop Cider from linking APL objects to their source files. Defaults to 0.</p> <p> <code>watch</code></p> <p>Setting this flag has implications for how Cider deals with Tatin packages.</p> <code>noPkgLoad</code> <p>Flag to stop Cider from loading Tatin dependencies as specifed in the config file\u2019s <code>dependencies</code> and <code>dependencies_dev</code> settings. Defaults to 0.</p> <code>parent</code> <p>String. Defaults to <code>#</code> but could be something like <code>\u2395SE</code> or <code>#.Foo.Goo.Boo</code>. All namespaces listed must exist.</p> <p> <code>parent</code></p> <code>projectSpace</code> <p>String. The name of the namespace the project is injected into. If this is empty it is going to be <code>#</code> or <code>\u2395SE</code>, depending from where the function was called from.</p> <p> <code>projectSpace</code></p> <code>quietFlag</code> <p>Flag to stop Cider printing messages to the session. (They are still returned in the function\u2018s result.)</p> <code>suppressInit</code> <p>Flag to stop Cider executing the project\u2019s initialisation function. Defaults to 0.</p> <p>For example, an automated build process might open a project without initialising it.</p> <code>watch</code> <p>String. See <code>watch</code> in the project config for setting values.</p> <p> How Link watches for changes</p> <p> <code>]CIDER.OpenProject</code></p>"},{"location":"api/#project-config","title":"Project config","text":"<pre><code>{r}\u2190ProjectConfig projectpath\n</code></pre> <p>Where <code>projectpath</code> is a project path, Cider displays the project config for editing.</p> <p>Asks your permission before writing changes back to file, and performs checks before doing so.</p>"},{"location":"api/#read-project-config-file","title":"Read project config file","text":"<pre><code>config\u2190ReadProjectConfigFile projectpath\n</code></pre> <p>Where <code>projectpath</code> is a project path, Cider returns its project config as a parameter namespace.</p> <p>The path may or may not terminate in the filename <code>cider.config</code>.</p> <p>Side effect If the function does not find the sub-keys <code>dependency.tatin</code> and <code>dependency.nuget</code> in the file it creates them and writes them there.</p> <p> <code>]CIDER.ProjectConfig</code>.</p>"},{"location":"api/#write-project-config-file","title":"Write project config file","text":"<pre><code>{r}\u2190config WriteProjectConfigFile project\n</code></pre> <p>Where</p> <ul> <li><code>config</code> is a parameter namespace</li> <li><code>project</code> is a project path</li> </ul> <p>Cider writes the contents of <code>config</code> as the project\u2019s configuration file.</p> <p>The path may or may not terminate in the filename <code>cider.config</code>.</p>"},{"location":"api/#version","title":"Version","text":"<pre><code>r\u2190Version\n</code></pre> <p>Returns a string with major and minor versions, patch number and timestamp, e.g.</p> <pre><code>      \u2395SE.Cider.Version\n0.44.0+835\n</code></pre> <p>This could be just e.g. <code>1.2.3</code>,  but might be something like <code>1.2.3-beta-1+113</code>.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Project settings, and settings that apply to all your projects</p>"},{"location":"configuration/#global-configuration","title":"Global configuration","text":"<p>Cider\u2019s global configuration settings apply to all your projects.</p> <p>Non-default settings can be saved in a folder <code>.cider</code> in your home folder.</p> <p>For example, for user JohnDoe:</p> <pre><code>Linux     /home/JohnDoe/.cider\nmacOS     /Users/JohnDoe/.cider\nWindows   C:\\Users\\JohnDoe\\.cider\n</code></pre> <p>The default name for the global configuration is  <code>config.json</code>.</p> <p>Example:</p> <pre><code>{\n  AskForDirChange: 1,\n  CheckForDropboxConflicts: 1,\n  ExecuteAfterProjectOpen: \"\u2395SE.Path.To.Function\",\n  ReportGitStatus: 1,\n  verbose: 1,\n}\n</code></pre> <p> <code>GetCiderGlobalConfigFilename</code> <code>GetCiderGlobalConfigHomeFolder</code></p> <p>This folder also contains</p> <ul> <li>alias definitions in <code>aliases.txt</code></li> <li>your project template in <code>cider.config.template</code></li> </ul>"},{"location":"configuration/#askfordirchange","title":"<code>AskForDirChange</code>","text":"<p>On opening the first project in the current workspace</p> <pre><code>0 - Take no action\n1 - Change the current directory to the project root (default)\n2 - Ask me if I want to change the directory\n</code></pre>"},{"location":"configuration/#checkfordropboxconflicts","title":"<code>CheckForDropboxConflicts</code>","text":"<p>If this flag is set, when opening and closing projects Cider will report files where the name contains the string \"conflicted copy\".</p> <p>Absent this flag, if your home folder contains a folder <code>Dropbox/</code>, Cider will also perform the check.</p> <p>How Dropbox reports conflicts</p> <p>If Dropbox cannot decide what the last version of a file is, it will create a file with \"conflicted copy\" in its name. Dropbox leaves it to you to compare such files and resolve the conflict.</p> <p>Dropbox does not actually alert you to such conflicts, it just silently creates the files. So you can configure Cider to look for them.</p> <p> <code>CIDER.CloseProject</code> <code>CIDER.OpenProject</code></p>"},{"location":"configuration/#executeafterprojectopen","title":"<code>ExecuteAfterProjectOpen</code>","text":"<p>If defined and not empty, the fully qualified name of a monadic function.</p> <pre><code>ExecuteAfterProjectOpen: \"\u2395SE.Path.To.Function\",\n</code></pre> <p>Cider will execute the function after you open any project, unless the <code>ignoreUserExec</code> option or parameter is set.</p> <p>The function\u2019s argument is the project config as a namespace. Any result it returns is ignored.</p> <p>Use cases</p> <p>Suppose you use a source code manager (SCM) other than Git. With Git, Cider would execute the <code>status</code> command and show you the result. With another SCM, it does not know what to do.</p> <p>You can fix that: add the required code as a function you load early into <code>\u2395SE</code>, then have <code>ExecuteAfterProjectOpen</code> call it.</p> <p>Or, your initialisation function couild bring in non-Tatin dependencies defined in the <code>dependencies</code> and/or the <code>dependencies_dev</code> settings.</p>"},{"location":"configuration/#reportgitstatus","title":"<code>ReportGitStatus</code>","text":"<p>On opening a Git-controlled project Cider reports its status acccording to the <code>ReportGitStatus</code> setting:</p> <pre><code>0 - Don't report\n1 - Report in a read-only edit window (default)\n2 - Print it to the session\n3 - Ask me what to do\n</code></pre> <p>If the project path has no <code>.git</code> folder, or if the <code>batch</code> flag is set, nothing is reported.</p>"},{"location":"configuration/#verbose","title":"<code>verbose</code>","text":"<p>Setting this flag increases the information Cider prints.</p> <p> <code>]CIDER.OpenProject</code> and the <code>-verbose</code> option.</p>"},{"location":"configuration/#project-configuration","title":"Project configuration","text":"<p>When a Cider project is created, a copy of the file <code>cider.config.template</code> in the global configuration folder is copied into the project root as <code>cider.config</code>.</p> <p>The Cider configuration file comes with four sections: <code>CIDER</code>, <code>LINK</code>, <code>SYSVARS</code>, <code>USER</code>. (The <code>LINK</code> section is now deprecated.)</p>"},{"location":"configuration/#cider","title":"<code>CIDER</code>","text":""},{"location":"configuration/#dependencies","title":"<code>dependencies</code>","text":"<p>The setting has two subkeys: <code>tatin</code> and <code>nuget</code>:</p> <pre><code>dependencies: {\n    tatin: \"tatin-packages\",\n    nuget: \"nuget-packages\",\n},\n</code></pre> <p>The subkey <code>tatin</code> defaults to <code>\"tatin-packages\"</code>, which must be a folder in the project folder.</p> <p>On opening a project Cider loads all Tatin and NuGet packages (installed in the project\u2019s subfolders <code>tatin-packages</code> and <code>nuget-packages</code> respectively) into the project space.</p> <p>To load the packages into child spaces of the project space, e.g. <code>Foo</code> and <code>Goo</code>:</p> <pre><code>dependencies: {\n    tatin: \"tatin-packages=Foo\",\n    nuget: \"nuget-packages=Goo\",\n}\n</code></pre> <p>Cider will ignore any other subkeys of <code>dependencies</code>.</p>"},{"location":"configuration/#dependencies_dev","title":"<code>dependencies_dev</code>","text":"<p>As for <code>dependencies</code>, but with dependencies required only for development and testing, not for producing the final package or application.</p> <p>These dependencies are usually loaded into a child of the project space:</p> <pre><code>dependencies_dev: {\n    tatin: \"tatin-packages_dev=Testcases\",\n}\n</code></pre> <p>Above, all packages in folder <code>tatin-packages_dev</code> (a child of the project folder) are loaded into the  space <code>Testcases</code>, a child of the project space.</p> There is no  <code>nuget</code> subkey in <code>dependencies_dev</code>. <p>This restriction may be removed in a future release.</p>"},{"location":"configuration/#distributionfolder","title":"<code>distributionFolder</code>","text":"<p>The default destination for the ZIP file produced by Tatin\u2019s <code>BuildPackage</code> function: either empty or the path to a folder, usually relative to the project root. There is no default.</p> <p>If you always create your package ZIP files in the same  child folder of each project, define this in the project config template file.</p>"},{"location":"configuration/#init","title":"<code>init</code>","text":"<p>Empty, or the name of a function in the project space.</p> <p>After the project is opened or imported, the function will be executed.</p> <p>The function may be niladic, monadic or ambivalent. Any right argument is the project config as a namespace.</p> <p>Any result should be shy.</p>"},{"location":"configuration/#make","title":"<code>make</code>","text":"<p>Empty, or an expression (relative to the project) that would create a new version.</p> <p>See how to create a new version of the project, e.g.</p> <pre><code>      ]Cider.HowToMakeNewVersion\n#.Cider.Admin.Make 1 \u235d Execute this for creating a new version\n</code></pre> <p>The output is compiled from the config parameter values <code>CIDER.parent</code>, <code>CIDER.projectSpace</code> and <code>CIDER.make</code>, and the comment then added.</p> <p>However, if the first non-white space character of <code>make</code> is a <code>]</code>, its definition would just be printed to the session together with a comment because then it is obviously a user command.</p>"},{"location":"configuration/#parent","title":"<code>parent</code>","text":"<p>Required. Fully-qualified name of the parent of the project space. Defaults to <code>#</code> but could be e.g. <code>\u2395SE</code> or <code>#.MyNamespace1.MyNamespace2</code>.</p> <p>If the namespace does not exist when the project is opened, Cider signals an error.</p> <p>Example settings:</p> <pre><code>{\n  CIDER: {\n    \u2026\n    parent: \"#\",\n    projectSpace: \"myproj\",\n    \u2026\n    source: \"APLSource\",\n  },\n  \u2026\n}\n</code></pre> <p>The user command and API function can override this setting, e.g.</p> <pre><code>]CIDER.OpenProject path/to/project -parent=#.Foo\n\n\u2395SE.Cider.OpenProject \u2395SE.Cider.CreateOpenParms (\n    folder:'path/to/project'\n    parent:'#.Foo'\n    )\n</code></pre>"},{"location":"configuration/#projectspace","title":"<code>projectSpace</code>","text":"<p>Required. Name of the namespace that will contain the project.</p> <p>The user command and API function can override this setting, e.g.</p> <pre><code>]CIDER.OpenProject {path} -projectspace=Foo\n</code></pre>"},{"location":"configuration/#project_url","title":"<code>project_url</code>","text":"<p>Empty, or the URL of, say, a GitHub project. For information only.</p> <p>Cider includes the <code>APLGit2</code> package, an interface between Dyalog and Git, although some of its commands work only when the project is hosted on GitHub.</p> <p>Some functions of <code>APLGit2</code> must know the <code>owner</code> of a project on GitHub. Those functions will investigate <code>project_url</code>. If it points to GitHub, the owner is established from its contents.</p>"},{"location":"configuration/#source","title":"<code>source</code>","text":"<p>Path (relative to the project folder) of the folder that contains all its APL code. Defaults to <code>APLSource</code>.</p> <p>This could be empty, for example, if the project is a single script (class or namespace) in the project root.</p> <p>Note that this might differ from the Tatin <code>source</code> parameter, which could point to a child folder of Cider's <code>source</code> containing just the code that is a package. Cider\u2019s <code>source</code> could also contain test cases, development tools, and other things.</p>"},{"location":"configuration/#tatinvars","title":"<code>tatinVars</code>","text":"<p>Optional. Either</p> <ul> <li><code>\u2395THIS</code>: has the same effect as if the property were undefined</li> <li>the name of a child space of the project space</li> </ul> <p>See Injecting a namespace <code>TatinVars</code> for what happens.</p>"},{"location":"configuration/#tests","title":"<code>tests</code>","text":"<p>Empty, or an expression (relative to the project) that would execute the test cases of the project.</p> <p>See how to execute the test cases, e.g.</p> <p><pre><code>      ]Cider.HowToRunTests\n#.Cider.TestCases.RunTests\n</code></pre> Above, execute <code>#.Cider.TestCases.RunTests</code> to run the test suite.</p> <p>The output is compiled from the config parameter values <code>CIDER.parent</code>, <code>CIDER.projectSpace</code> and <code>CIDER.tests</code>, and the comment added.</p> <p>However, if the first non-white space character of <code>tests</code> is a <code>]</code> (making it a user command rather than a function call), its definition would just be printed to the session together with a comment.</p>"},{"location":"configuration/#link","title":"<code>LINK</code>","text":"<p>DEPRECATED This section of the Cider config is optional</p> <p>Link has its own config file since version 4.0.0, but, until all supported versions of Link deal with it, Cider saves non-default values in a Cider project config.</p> <p>Cider looks for <code>.linkconfig</code> at the path specified in <code>source</code>; if <code>source</code> is empty, then the root of the project.</p>"},{"location":"configuration/#conflicts-in-link-settings","title":"Conflicts in Link settings","text":"<p>As of Cider version 0.46.0</p> <p>If Cider finds a Link config file, it ignores the <code>LINK</code> section of its config and reminds you to delete it</p> <p>unless the Link config file contains only stop and trace vectors and the Link version number \u2013 then Cider will use its <code>LINK</code> settings, and recommend you</p> <ul> <li>reconcile the two sources of Link options</li> <li>delete the <code>LINK</code> section from the Cider config</li> </ul>"},{"location":"configuration/#watch","title":"<code>watch</code>","text":"<p>The source/s to watch for changes to linked APL definitions. Changes in one environment (workspace or file) can be synchronised with the other according to this setting.</p> <pre><code>ns   - watch the active workspace\ndir  - watch the file definitions\nboth - watch both (default)\nnone - watch neither\n</code></pre> <p>The <code>watch</code> setting is ignored when a project is opened with the <code>import</code> option.</p> <p> <code>Link.Create</code></p>"},{"location":"configuration/#sysvars","title":"<code>SYSVARS</code>","text":"<p>This section lets you set system variables.</p> <p>Always set <code>\u2395IO</code> and <code>\u2395ML</code> explicitly.</p> <p>You can set other system variables here, for example, <code>\u2395CT</code> as <code>ct</code>, and so on.</p> <p>System variable names are case-insensitive.</p>"},{"location":"configuration/#user","title":"<code>USER</code>","text":"<p>In this section you can set your own project-specific values. Cider ignores them.</p> <p>For example</p> <pre><code>USER: {\n   \"Foo\": 1,\n},\n</code></pre> <p>After opening the project into, say, <code>#.MyProject</code>, the setting is accessible:</p> <pre><code>#.MyProject.CiderConfig.USER.Foo\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":"<p>How to contribute to Cider</p> <p>Cider exposes an API and some user commands.</p> <p>API functions</p> <ul> <li>make no guesses: they require exact arguments and parameters</li> <li>do not communicate with you</li> <li>signal an error if they fail</li> </ul> <p>User commands</p> <ul> <li>print helpful messages if something goes wrong (but signal errors for missing or invalid parameters)</li> <li>often guess what you want; e.g. if no project is specified but one is open, the command uses it; if several are open, Cider asks you to select one</li> </ul>"},{"location":"contribute/#cider-manages-cider","title":"Cider manages Cider","text":"<p>The Cider source code is itself a Cider project. </p> <ol> <li>Fork a copy of the official repository</li> <li>Clone it to your local machine</li> <li>Open it with Cider</li> </ol>"},{"location":"contribute/#namespaces","title":"Namespaces","text":"<p>The only namespace a Cider user needs to refer to (for the API) is <code>\u2395SE.Cider</code>.</p> <p>Developers understand:</p> <code>#.Cider</code> holds the project. <code>#.Cider.Cider</code> holds what will eventually become the Cider package. <code>#.Cider.Cider.UC</code> holds the functions called by the user-command framework. They potentially communicate with the user, prepare arguments and eventually call functions in <code>#.Cider.Cider</code>. <code>\u2395SE.Cider</code> is a ref pointing to the Cider package\u2019s API namespace, for example: <code>\u2395SE._tatin.aplteam_Cider_0_44_0.API</code> <code>\u2395SE._tatin</code> holds all packages loaded into <code>\u2395SE</code>, while <code>#._tatin</code> holds all Tatin packages loaded into <code>#</code>. The API namespace (the name can be configured in the project\u2019s config file) holds thin covers for calling the real thing in the parent, hence <code>##</code> or <code>\u2395SE.Cider.##</code> <code>\u2395SE.Cider.##.UC</code> is the same as <code>#.Cider.Cider.UC</code> but as part of the user-command package rather than the project. <p>When you execute a user command like <code>]Cider.ListOpenProjects</code> it is executed in <code>\u2395SE</code>.</p> <p>When you run tests, you might want to make changes to the code. That would not work well when user commands are tested because changes in <code>\u2395SE</code> are not tracked! That\u2019s why the tests ask whether you would prefer the code to be executed in <code>#.Cider</code> rather than <code>\u2395SE.Cider</code>, because then they are tracked.</p>"},{"location":"contribute/#develop","title":"Develop","text":"<p>Development Mode (DM) is set in variable <code>\u2395SE.Cider.DEVELOPMENT</code>:</p> <pre><code>0 - off\n1 - on (verbose)\n2 - on (silent)\n</code></pre> <p>If DM is 2, reports and warnings are suppressed.</p>"},{"location":"contribute/#user-commands-and-the-api","title":"User commands and the API","text":"<p>Cider\u2019s core logic is in the API functions.</p> <p>The user-command script works out whether it should execute code in <code>\u2395SE</code> or in <code>#</code>,  then calls functions according to the DM:</p> <pre><code>off - \u2395SE.Cider.##.UC\non  - #.Cider.Cider.UC\n</code></pre> <p>The API functions are in <code>\u2395SE.Cider</code>, and call objects in <code>\u2395SE.Cider.##</code></p> <p>The user-command functions are in <code>\u2395SE.Cider.##.UC</code></p>"},{"location":"contribute/#the-user-command-script","title":"The user-command script","text":"<p>The user-command script is a thin cover for calls to (usually) <code>\u2395SE.Cider.UC</code>.</p> <p>You will rarely need to change it.</p> <p>If you do, Link records your changes only if you have specified environment variable</p> <pre><code>DYALOGSTARTUPKEEPLINK : 1,\n</code></pre> <p>in a Dyalog configuration file.</p> <p>How to set environment variables</p> <p>See the Dyalog installation and configuration guides for how to set environment variables.</p> <p> Dyalog Documentation Centre</p> <p>Change the script either in the location it is started from, or in the project, but not in both.</p> <p>When you create a new version, Cider checks whether the two versions are identical. If not, it proposes copying over the version that carries the latest changes.</p>"},{"location":"contribute/#changing-user-command-functions","title":"Changing user-command functions","text":"<p>The user-command script calls functions in <code>#.Cider.UC</code> when DM is on, and in <code>\u2395SE.Cider.##.UC</code> when DM is off.</p> <p>Because that namespace is part of the project, with DM on, your changes are recorded, and developing is easy.</p>"},{"location":"contribute/#changing-api-functions","title":"Changing API functions","text":"<p>A Cider user command calls a function in the <code>UC</code> namespace (see above), which eventually calls an API function in</p> <pre><code>#.Cider.Cider   \u235d DM on\n\u2395SE.Cider       \u235d DM off\n</code></pre> <p>When Cider opens Cider as a project, it proposes setting DM on in <code>\u2395SE.Cider</code>.</p> <p>With DM on, when you change a function in the course of running it, Link will save it in the project, preserving your changes.</p> <p>To remind you what\u2019s happening, Cider prints a warning whenever a user command is executed:</p> <pre><code>*** Warning: Code is executed in #.Cider.Cider rather than \u2395SE.Cider!\n</code></pre>"},{"location":"contribute/#test","title":"Test","text":"<p>Cider can tell you how to run the test cases:</p> <pre><code>]Cider.HowToRunTests\n</code></pre> <p>That prints an expression that, if executed, runs all the tests (interactive included) and reports to the session.</p> <p>If DM is 1, the test suite sets it to 2 while running, so as not to flood the session window.</p> <p>To execute the test suite in batch mode (no reports, and returns a single flag indicating success):</p> <pre><code>#.Cider.TestCases.RunTestsInBatchMode\n</code></pre> <p>NuGet tests require .NET</p> <p>Running the NuGet tests requires .NET, rather than .NET Framework.</p> <p>The test cases execute only if .NET is available. </p>"},{"location":"contribute/#build","title":"Build","text":"<p>Cider can tell you how to build a new version. User command</p> <pre><code>]Cider.HowToMakeNewVersion\n</code></pre> <p>prints an expression that builds a new version.</p> <p>Before executing it, check both <code>#.Cider.Cider.Version</code> and <code>#.Cider.Cider.History</code> are up-to-date.</p> <p>Cider\u2019s <code>Admin.Make</code> function creates a new version and saves it as a ZIP file in the distribution folder specified in the project config.</p> <p>Finally, Cider proposes installing the new version.</p> <p>Doing so installs Cider over the current version. Restart Dyalog to use the new version.</p>"},{"location":"contribute/#distribute","title":"Distribute","text":"<p>To release a new version to Dyalog for bundling:</p> <ol> <li>Install Cider from the <code>tatin</code> Registry</li> <li>Zip the contents of the installation folder into a file with the name<pre><code>Installed-aplteam-Cider-&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;\n</code></pre> </li> </ol> <p>This function takes an argument of 1 and executes both steps:</p> <pre><code>#.Cider.Admin.MakeZipForDyalog 1\n</code></pre> <p>Upload the ZIP file to the release page for the version, where Dyalog can fetch and process it.</p>"},{"location":"get-started/","title":"Get started","text":"<p>Install and activate Cider; create and open a blank project</p>"},{"location":"get-started/#install","title":"Install","text":"<p>Dyalog version 19.0 has Tatin and Cider already installed. Nothing to do here.</p> For Dyalog v18.2 install Tatin and Cider <p>For Dyalog v18.2, first install Tatin.</p> <p>Then use Tatin to install Cider.</p> <pre><code>]Tatin.InstallPackages [tatin]Cider &lt;targetFolder&gt;\n</code></pre> <p>where <code>&lt;targetFolder&gt;</code> is</p>  Windows 32-bit Windows 64-bit Linux macOS <pre><code>C:\\Users\\&lt;\u2395AN&gt;\\Documents\\Dyalog APL 18.2 Unicode Files\\SessionExtensions\\CiderTatin\\Cider\n</code></pre> <pre><code>C:\\Users\\&lt;\u2395AN&gt;\\Documents\\Dyalog APL-64 18.2 Unicode Files\\SessionExtensions\\CiderTatin\\Cider\n</code></pre> <pre><code>/home/&lt;\u2395AN&gt;/dyalog.182U64.files/SessionExtensions/CiderTatin/Cider/\n</code></pre> <pre><code>/Users/&lt;\u2395AN&gt;/dyalog.182U64.files/SessionExtensions/CiderTatin/Cider/\n</code></pre>"},{"location":"get-started/#activate","title":"Activate","text":"<p>Dyalog v19.0 installs with Tatin and Cider, but they are disabled by default.</p> <pre><code>]Activate all\n</code></pre> <p>Rebuild the user commands.</p> <pre><code>]UReset\n</code></pre> <p>Restart Dyalog.</p> <p>Verify. For example,</p> <pre><code>      ]TATIN.Version\n Tatin  0.112.1+1942  2024-08-16\n      ]CIDER.Version\n0.42.2+671\n</code></pre> <p>Your first Cider user command also activates the Cider API.</p>"},{"location":"get-started/#create-a-blank-project","title":"Create a blank project","text":"<pre><code>      ]CIDER.CreateProject &lt;projectpath&gt;\n</code></pre> <p>where <code>&lt;projectpath&gt;</code> identifies a folder that is empty or does not exist.</p> <p>Cider creates the folder as a Cider project, with an empty <code>APLSource</code> child folder, linked to a new namespace in your active workspace.</p> <pre><code>      ]CIDER.CreateProject /Users/sjt/tmp/myproj\n\n\"/Users/sjt/tmp/myproj\" does not exist yet - create? (Y/n) Y\n\nProject successfully created; open as well? (Y/n) Y\nLink parameter \"watch\" is &lt;both&gt;\nThe current directory is now /Users/sjt/tmp/myproj\n  No Dropbox conflicts found\nProject successfully opened and established in \"#.myproj\"\n</code></pre> <p>Now Link will save APL objects in the <code>#.myproj</code> namespace as text files in <code>APLSource</code>.</p> <pre><code>      )CS myproj\n#.myproj\n      mean\u2190{(+\u233f\u00f7\u2262)\u2375}\n      ]LINK.Add mean\nAdded: #.myproj.mean\n</code></pre> <pre><code>\u276f tree myproj\nmyproj\n\u251c\u2500\u2500 APLSource\n\u2502   \u2514\u2500\u2500 mean.aplf\n\u2514\u2500\u2500 cider.config\n</code></pre>"},{"location":"get-started/#open-your-project","title":"Open your project","text":"<p>Clear the workspace and open the project.</p> <pre><code>      )CLEAR\nclear ws\n      ]CIDER.OpenProject /Users/sjt/tmp/myproj\nLink parameter \"watch\" is &lt;both&gt;\nThe current directory is now /Users/sjt/tmp/myproj\n  No Dropbox conflicts found\nProject successfully opened and established in \"#.myproj\"\n      myproj.mean \u237320\n10.5\n</code></pre> <p>Changes to the objects in <code>#.myproj</code> will be mirrored in their source files in <code>myproj/APLSource</code>. Changes to the source files will be mirrored in the workspace.</p> <p>When you quit Dyalog your changes have already been saved.</p> <p>If you have APL source files already written, copy them into the <code>APLSource</code> folder.</p>"},{"location":"open-project/","title":"Open project","text":"<p>What happens when you open a project, in detail</p> <p>You open a project with either</p> <ul> <li>user command <code>]CIDER.OpenProject</code></li> <li>API function <code>\u2395SE.Cider.OpenProject</code></li> </ul> <p>The actions on opening a project are modified by, in ascending priority:</p> <ol> <li>global config settings</li> <li>project config settings</li> <li>user-command options or API function parameters</li> </ol>"},{"location":"open-project/#create-the-project-space","title":"Create the project space","text":"<p>Cider creates the project space as a child of the parent namespace.</p> <p>The parent namespace is specified in the <code>parent</code> setting of the project config, and must exist. (It is <code>#</code> by default, but could be something like <code>\u2395SE</code> or <code>#.Foo.Goo</code>.) You can override the project setting with the <code>parent</code> option or parameter.</p> <p>The name of the project space is specified in the <code>projectSpace</code> setting of the project config, but you can override it with the <code>projectSpace</code> option or parameter.</p> <p>If the project space does not exist, Cider creates it.</p> <p>If neither the project space nor the project folder is empty, Cider proposes to empty the project space. (If you say not, Cider signals an error.)</p>"},{"location":"open-project/#set-system-variables","title":"Set system variables","text":"<p>Cider sets in the project space the values of <code>\u2395IO</code> and <code>\u2395ML</code> and any other system variables specified in the <code>SYSVARS</code> section of the project config.</p> <p>System variables have priority</p> <p>System variables must be set before code is brought into the workspace because defining classes or namespaces potentially entails executing code that relies on them.</p> <p>If a setting in <code>SYSVARS</code> cannot be used to set a system variable, Cider prints a warning message.</p> <p>Set system variables in your source code</p> <p>You can also set system variables in your source code in files like <code>\u2395IO.apla</code>.</p> <p>System variables are set as early as possible. Link sets the values of system variables defined in files before it brings other code into the workspace.</p>"},{"location":"open-project/#define-objects-in-the-project-space","title":"Define objects in the project space","text":"<p>Cider uses Link to find all files in the project\u2019s <code>source</code> folder (and its children) with supported file extensions and define them in the project space.</p> <p>Cider links the project space to the project folder according to the <code>watch</code> setting of the project config, which may be overridden by</p> <ul> <li>the <code>-watch=</code> or <code>import</code> options of <code>]CIDER.OpenProject</code></li> <li>the <code>watch</code> or <code>importFlag</code> parameters of <code>\u2395SE.Cider.OpenProject</code></li> </ul> <p> Troubleshooting: How link watches for changes</p>"},{"location":"open-project/#check-for-empty-package-folders","title":"Check for empty package folders","text":"<p>Cider checks whether any of the Tatin installation folders (specified in the <code>dependencies</code> and <code>dependencies_dev</code> settings of the project config) is empty apart from a dependency file and a build list.</p> Why the checks <p>Since version 0.21.0 Cider itself has an enhanced <code>.gitignore</code> file: it defines that the contents of the Tatin installation folder(s) but the two definition files shall be ignored. Only these two definition files are therefore uploaded to GitHub, but none of the packages.</p> <p>So when somebody downloads the Cider project now the Tatin installation folder contains just those two definition files but no packages!</p> <p>Note this is in line with the majority of other package managers.</p> <p>If a Tatin installation folder contains the two definition files but no packages, Cider will ask you if it should re-install the packages.</p>"},{"location":"open-project/#check-for-later-package-versions","title":"Check for later package versions","text":"<p>If the project has Tatin packages installed in one or more folders, Cider proposes to check for later versions of any of the principal packages. (This will not happen only if <code>importFlag</code> is set.)</p> <p>If Cider finds a later version of a package it proposes to update it.</p> <p>Tatin registries only</p> <p>The check is offered only for packages loaded from a Tatin registry that is in your config file and has a priority greater than 0.</p> <p> Tatin documentation</p>"},{"location":"open-project/#load-tatin-packages","title":"Load Tatin packages","text":"<p>Cider loads required Tatin packages unless the user-command option <code>-noPkgLoad</code> or the API parameter <code>noPkgLoad</code> is used.</p> <p>Required Tatin packages are specified in the <code>tatin</code> subkeys of the <code>dependencies</code> and <code>dependencies_dev</code> settings in the project config.</p> <p>The packages are loaded into the project space unless the subkeys specify another destination.</p>"},{"location":"open-project/#load-nuget-packages","title":"Load NuGet packages","text":"<p>Cider loads required NuGet packages.</p> <p>Required NuGet packages are specified in the <code>nuget</code> subkey of the <code>dependencies</code> setting in the project config.</p> <p>The packages are loaded into the project space unless the subkeys specify another destination.</p> <p>NuGet packages and generics</p> <p>Packages that use generics cannot be used, as Dyalog\u2019s .NET interface does not support them. This restriction may be removed in a future release.</p> <p>NuGet packages can be included your application, but not loaded only as development tools, as only a single installation folder may be specified. (This restriction may be removed in a later release.)</p>"},{"location":"open-project/#inject-the-project-config","title":"Inject the project config","text":"<p>Cider injects a namespace <code>CiderConfig</code> into the project space and</p> <ul> <li>populates it with the project config as an APL array</li> <li>sets a variable <code>HOME</code> with the project path</li> </ul>"},{"location":"open-project/#inject-a-tatinvars-namespace","title":"Inject a <code>TatinVars</code> namespace","text":"<p>A file <code>apl-package.json</code> in the project folder indicates the project is to produce a Tatin package.</p> <p>If <code>apl-package.json</code> is found, Cider injects a namespace <code>TatinVars</code> into the project space. So while you work on the project, you can access <code>TatinVars</code> as if it had been loaded as a package.</p> <p>You would also expect a namespace <code>TatinVars</code> in the root of the package. That might be the project space, but is more likely to be a child namespace.</p> <p>If so, specify it in the optional setting <code>tatinVars</code> in the <code>CIDER</code> section of the project config.</p> Cider version 0.46.0Earlier Cider versions <p>Cider will move the namespace from the root of the project to that sub-namespace.</p> <p>Cider will then create a reference <code>TatinVars</code> in that namespace, pointing to <code>TatinVars</code> in the project space.</p>"},{"location":"open-project/#change-the-current-working-directory","title":"Change the current working directory","text":"<p>If neither <code>import</code>, <code>importFlag</code> nor <code>batch</code> is set, Cider checks the current working directory.</p> <p>If it\u2019s not the project folder, Cider proposes to change to it.</p>"},{"location":"open-project/#initialise-the-project","title":"Initialise the project","text":"<p>If the project config specifies an initialisation function, Cider executes it unless the <code>suppressInit</code> option or parameter is set.</p>"},{"location":"open-project/#execute-the-global-initialisation-function","title":"Execute the global initialisation function","text":"<p>If the global config specifies an initialisation function, it applies to all your projects.</p> <p>Cider executes it unless the <code>ignoreUserExec</code> option or parameter is set.</p>"},{"location":"open-project/#check-for-todo","title":"Check for <code>ToDo</code>","text":"<p>If neither <code>import</code>, <code>importFlag</code> nor <code>batch</code> is set; and the project space contains a non-empty variable <code>ToDo</code>, Cider prints it.</p>"},{"location":"open-project/#report-git-status","title":"Report Git status","text":"<p>If</p> <ul> <li>neither <code>import</code>, <code>importFlag</code> nor <code>batch</code> is set; and</li> <li>the project is version-controlled by Git; and</li> <li>the global config setting <code>ReportGitStatus</code> is greater than 0</li> </ul> <p>Cider reports the current branch and its status.</p>"},{"location":"release-notes/","title":"Release notes","text":"<p>Version history</p> <p>For a full list of fixes, see Cider on GitHub.</p> <p>Here we highlight incompatabilities, if any.</p> 0.46.0 2025-01-14 Several potentially BREAKING CHANGES! 0.45.0 2024-12-09 No compatability issues 0.44.0 2024-11-16 No compatability issues 0.43.2 2024-10-13 No compatability issues 0.43.1 2024-09-25 No compatability issues 0.43.0 2024-09-23 The <code>-raw</code> option removed from the <code>]ListTatinDependencies</code> user command 0.42.4 2024-09-07 No compatability issues 0.42.3 2024-09-05 No compatability issues 0.42.2 2024-08-04 Bug fixes. 0.42.1 2024-07-12 Injecting <code>TatinVars</code> has changed.<code>]Cider.ProjectConfig</code>'s <code>-print</code> option replaced by <code>-edit</code>."},{"location":"troubleshooting/","title":"Troubleshooting","text":"I don\u2019t mind a reasonable amount of trouble. <p>Sam Spade in Dashiel Hammett\u2019s The Maltese Falcon</p>"},{"location":"troubleshooting/#how-link-watches-for-changes","title":"How Link watches for changes","text":"<p>To detect changes on the file system, Link uses a .NET File System Watcher.</p> <p>To detect changes in the workspace, Link uses APL threads.</p> <p>When you trace through your code, or set a stop vector, and have Pause on Error checked in the session\u2019s Threads menu, handlers associated with those threads will also stop.</p> <p>The Link handlers set a Hold under some circumstances. Depending on your actions, this might result in a deadlock. Dyalog would appear to hang until you use the session\u2019s System menu to issue a strong interrupt.</p>"},{"location":"troubleshooting/#updating-cider","title":"Updating Cider","text":"<p>If the update process fails for any reason other than network interruptions, calling it again rarely helps. You need an escape route.</p> Dyalog v19.0 and laterDyalog v18.2 <ol> <li>Execute <code>]DeActivate tatin</code> to remove Cider.</li> <li>Execute <code>]Activate cider</code> to restore the version of Cider your installation originally came with.</li> <li>Execute <code>]Cider.UpdateCider</code> to try to update to the latest version.</li> </ol> <p>Uninstall and then install Cider again.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>A worked example using Cider and Tatin</p> <p>Use Cider as the project manager to publish some Tatin packages, with test scripts, and dependencies on each other, all with public GitHub repos.</p>"},{"location":"tutorial/#four-packages","title":"Four packages","text":"<p>A worked example needs packages that are simple but not trivial \u2013 and preferably actually useful.</p> NiceTime Take a <code>\u2395TS</code> timestamp as argument and return a text string describing the offset from the present. Translate For a text string, return from a dictionary its equivalent in another language. Text An APL equivalent of Python\u2019s interpolated string, e.g. <code>f'2+2={2+2}'</code> =&gt; <code>'2+2=4'</code>. TinyTest A minimal test framework: operators to compare against an expected result, and catch an expected error. <p>Usage examples:</p> <pre><code>      #.nicetime.was (-\u22181@3)\u2395TS\nyesterday\n\n      'fr' #.translate.text 'yesterday'\nhier\n\n      N\u21902\n      #.text.f'depuis {N} mois'\ndepuis 2 mois\n\n      ec\u21900 \u235d error count\n      ec+\u21902(+ #.tinytest.match 4)2\n      ec+\u21902 3(+ #.tinytest.catch 5 'LENGTH ERROR')4 5 6\n      #.tinytest.report ec\nAll tests passed\n</code></pre>"},{"location":"tutorial/#interdependencies","title":"Interdependencies","text":"<p>The first three packages all use TinyTest for their test scripts, so all need TinyTest as a development dependency.</p> <p>NiceTime depends on Translate, which, in turn, depends on Text.</p> <pre><code>NiceTime\n- TinyTest (dev)\n- Translate\n  - TinyTest (dev)\n  - Text\n    - TinyTest (dev)\n</code></pre> <p>Where package A depends upon package B, publish B first.</p> <p>The APL code for these packages can be seen in their GitHub repos, linked to above. But we start at the beginning.</p>"},{"location":"tutorial/#workflow","title":"Workflow","text":"<p>The workflow for each package follows the same steps.</p> <ol> <li> <p>Create a Cider project: links a folder in your local file system to a namespace in your workspace and drafts a Cider configuration for you.</p> </li> <li> <p>Write and test your APL code in the namespace. (Link saves it in <code>APLSource/</code> within the project folder.)</p> </li> <li> <p>Put under version control: Initialise the project folder as a Git repository and link it to a repo on your GitHub account.</p> </li> <li> <p>Configure as a Tatin package: write a Tatin configuration file in the project folder.</p> </li> <li> <p>Create a public API if only some objects are to be exposed.</p> </li> <li> <p>Include dependencies: any Tatin or Nuget packages on which the APL code depends.</p> </li> <li> <p>Build the package as a ZIP in the project\u2019s distribution folder.</p> </li> <li> <p>Publish the package to a Tatin server.</p> </li> </ol> <p>For the first package in this worked example, these steps are described in detail. For subsequent packages, only the variations.</p>"},{"location":"tutorial/#tinytest","title":"TinyTest","text":"<p>The smallest testing framework that could possibly work</p> <p>The other three packages depend on TinyTest, which has no dependencies of its own. So we publish TinyTest first.</p> <p> TinyTest</p>"},{"location":"tutorial/#create-a-cider-project","title":"Create a Cider project","text":"<p>We begin in my <code>examples/</code> folder. (You will of course use your own file path.)</p> <pre><code>      ]CD /Users/sjt/Projects/Dyalog/examples\n/Users/sjt\n      ]CIDER.CreateProject tinytest\n\"/Users/sjt/Projects/dyalog/examples/tinytest\" does not exist yet - create? (Y/n) y\n</code></pre> <p>Cider uses the Editor to show me its draft of the Cider configuration</p> tinytest/cider.config <pre><code>{\n  CIDER: {\n    cider_version: \"0.48.0\",\n    dependencies: {\n      nuget: \"\",\n      tatin: \"\",\n    },\n    dependencies_dev: {\n      tatin: \"\",\n    },\n    distributionFolder: \"Dist\",\n    init: \"\",\n    make: \"\",\n    parent: \"#\",\n    projectSpace: \"tinytest\",\n    project_url: \"\",\n    source: \"APLSource\",\n    tests: \"\",\n  },\n  SYSVARS: {\n    io: 1,\n    ml: 1,\n  },\n  USER: {\n  },\n}\n</code></pre> <p>This looks all right. The <code>CIDER</code> subkeys <code>dependencies.tatin</code> and <code>dependencies_dev.tatin</code> are empty, which is fine: TinyText has no dependencies.</p> <p>Esc to save the config as is and close the Editor.</p> <pre><code>Project successfully created; open as well? (Y/n) y\nProject successfully opened and established in: #.tinytest\n</code></pre> <p>Now we see in the <code>examples/</code> folder:</p> <pre><code>tinytest\n\u251c\u2500\u2500 APLSource\n\u2514\u2500\u2500 cider.config\n</code></pre> <p>Nothing in the <code>APLSource/</code> folder yet. We can fix that.</p>"},{"location":"tutorial/#apl-source","title":"APL source","text":"<pre><code>      )CS #.tinytest\n</code></pre> <p>In the Editor we define two d-ops and a d-fn. Link saves them in the file system.</p> <pre><code>tinytest\n\u251c\u2500\u2500 apl-package.json\n\u251c\u2500\u2500 APLSource\n\u2502  \u251c\u2500\u2500 catch.aplo\n\u2502  \u251c\u2500\u2500 match.aplo\n\u2502  \u2514\u2500\u2500 report.aplf\n\u2514\u2500\u2500 cider.config\n</code></pre> <p>Now we have something worth backing up.</p>"},{"location":"tutorial/#git-and-github","title":"Git and GitHub","text":"<p>On GitHub we create a new repo for TinyTest, with a <code>README.md</code> and a licence acceptable to Tatin. (Below, the GitHub username is <code>5jt</code>; you will, of course, use your own account and email address.)</p> <p>On our local machine we open a command shell in <code>tinytest/</code>, run <code>git init</code>, and register the GitHub repo as a remote:</p> <p><pre><code># initialise as a Git repository\ngit init\n# register the GitHub repo as a remote\ngit remote add origin git@github.com:5jt/TinyTest.git\n# pull content from GitHub\ngit pull origin main\n# include and commit local content\ngit add .\ngit commit -m 'Cider project'\n# push changes to GitHub\ngit push origin main\n</code></pre> Now the project looks like this in the file system.</p> <pre><code>tinytest\n\u251c\u2500\u2500 APLSource\n\u2502  \u251c\u2500\u2500 catch.aplo\n\u2502  \u251c\u2500\u2500 match.aplo\n\u2502  \u2514\u2500\u2500 report.aplf\n\u251c\u2500\u2500 cider.config\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"tutorial/#initialise-as-a-tatin-package","title":"Initialise as a Tatin package","text":"<p>So far we have working APL code, managed by Cider, and backed by a GitHub repo. We do not yet have a Tatin package. Back to the APL session.</p> <p><pre><code>      ]CD\n/Users/sjt/Projects/dyalog/examples\n      ]TATIN.CreateProject tinytest\n\nThere is no file /Users/sjt/Projects/dyalog/examples/tinytest/apl-package.json yet; would you like to create it? (Y/n) Y\nEnter the group name (mandatory): sjt\nEnter the package name (mandatory) [tinytest]:\nEnter a description of what the package is doing (mandatory): Minimal testing framework\nEnter the email address of the maintainer: sjt@5jt.com\nEnter a comma-separated list of tags: framework,test\nEnter name of the license (enter \"?\" for a list of options): MIT\n\nIs the project (going to be) hosted on GitHub? (a URL will then be compiled for the \"project_url\" property) (Y/n) Y\n</code></pre> Above, the Tatin group name is <code>sjt</code> and the maintainer\u2019s email address is <code>sjt@5jt.com</code>; you will, of course, use your own.</p> <p>Tatin uses the Editor to display its draft configuration.</p> tinytest/apl-package.json <pre><code>{\n  api: \"\",                                           // The public interface of the package\n  assets: \"\",                                        // Empty or a single folder holding assets required by the package\n  description: \"Minimal testing framework\",          // Mandatory. Maximum length is 120 chars.\n  documentation: \"\",                                 // A URL or a local path or a function providing documentation\n  files: \"\",                                         // Optional. For files like \"ReadMe.txt\" to go to the root of the package\n  group: \"sjt\",                                      // Mandatory. Maximum length is 120 chars.\n  io: 0,                                             // Value for index origin\n  license: \"MIT\",                                    // Name of the license; see ]Tatin.ListLicenses\n  lx: \"\",                                            // Function to be called when the package is established in the WS\n  maintainer: \"sjt@5jt.com\",                         // The email address of the maintainer\n  minimumAplVersion: \"18.2\",                         // Minimum version required to run the package\n  ml: 0,                                             // Value for migration level\n  name: \"tinytest\",                                  // Mandatory. The project's name\n  os_lin: 1,                                         // 1=the package runs under Linux\n  os_mac: 1,                                         // 1=the package runs under Mac OS\n  os_win: 1,                                         // 1=the package runs under Windows\n  project_url: \"https://github.com/auser/tinytest\",  // The project's home for example\n  source: \"\",                                        // Mandatory. Either a code file (.aplc, .apln, etc.) or a folder\n  tags: \"framework,test\",                            // A comma-separated list of tags\n  userCommandScript: \"\",                             // Path to the user command script within the project\n  version: \"0.1.0+0\",                                // Mandatory. The project's version number\n}\n</code></pre> <p>This is nearly right.</p> <ul> <li> <p>The GitHub README will serve as documentation for TinyTest.</p> <pre><code>    documentation: \"https://github.com/5jt/tinytest\",\n</code></pre> </li> <li> <p>We must specify where the APL source files are, i.e. <code>APLSource/</code>.</p> <pre><code>    source: \"APLSource\",\n</code></pre> </li> </ul> Index Origin and Migration Level <p>Tatin reads (and configures) the values of <code>\u2395IO</code> and <code>\u2395ML</code> from your default Dyalog configuration, that is, from <code>2 \u2395NQ # 'GetEnvironment' 'default_io</code>, etc.</p> <p>It is best to keep these system variables the same throughout your package. If you want a different value in a particular namespace, have a project initialisation function set it. </p> Minimum APL version <p>The default Tatin configuration in <code>apl-package.json</code> specifies a minimum APL version of 18.2, the lowest that will support Tatin.</p> <p>If you are developing in V20.0 or higher, your APL source files might use array notation. If so, specify in <code>apl-package.json</code> a minimum version of 20.0.</p> <p>Esc to save the configuration and finish the dialogue.</p> <p><pre><code>Add a build number to the version (for telling different builds with same version no. apart)? (Y/n) Y\n\nDoes the package come with a user command script? (y/N) N\n</code></pre> Tatin configuration file <code>apl-package.json</code> now appears in the project folder.</p> <p>TinyTest has no dependencies, so we are ready to build the package.</p>"},{"location":"tutorial/#build-the-package","title":"Build the package","text":"<p>The last step before publishing is to build the Tatin package as a ZIP in the distribution folder specified in the Cider configuration.</p> <p><pre><code>      ]TATIN.BuildPackage\n\nSure that you want to pack\n   /Users/sjt/Projects/dyalog/examples/tinytest/\ninto\n/Users/sjt/Projects/dyalog/examples/tinytest/Dist/? (Y/n) y\n\nTarget directory\n/Users/sjt/Projects/dyalog/examples/tinytest/Dist/\ndoes not exist yet; create it? (Y/n) y\n/Users/sjt/Projects/dyalog/examples/tinytest/Dist/sjt-tinytest-0.1.0.zip\n</code></pre> Now our project looks like this: <pre><code>tinytest\n\u251c\u2500\u2500 apl-package.json\n\u251c\u2500\u2500 APLSource\n\u2502  \u251c\u2500\u2500 catch.aplo\n\u2502  \u251c\u2500\u2500 match.aplo\n\u2502  \u2514\u2500\u2500 report.aplf\n\u251c\u2500\u2500 cider.config\n\u251c\u2500\u2500 Dist\n\u2502  \u2514\u2500\u2500 sjt-tinytest-0.1.0.zip\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> In the distribution folder <code>Dist/</code> we see a ZIP of version 0.1.0. We do not want it under version control:</p> <p>tinytest/.gitignore</p> <pre><code>Dist/\n</code></pre> <p>The package is ready to publish to the Test server.</p>"},{"location":"tutorial/#publish-to-a-tatin-server","title":"Publish to a Tatin server","text":"<p>The working directory is still the <code>examples/</code> folder, so the path to the project folder is simply <code>tinytest</code>.</p> <pre><code>      ]TATIN.PublishPackage tinytest [tatin-test]\nPackage published on https://test.tatin.dev/\n      ]TATIN.ListPackages [tatin-test] -group=sjt\n Registry: [tatin-test]               \u2262 1\n Group &amp; Name            # major versions\n ------------            ----------------\n sjt-tinytest                           1\n</code></pre>"},{"location":"tutorial/#text","title":"Text","text":"Interpolate a string, much like Python\u2019s <code>f</code> does. <p>(By string we mean a character vector.)</p> <pre><code>      text.f'{2} + {2} = {2+2}'\n2 + 2 = 4\n\n      (A B)\u21902 3\n      text.f'{A} + {B} = {A+B}'\n2 + 3 = 5\n</code></pre> <p> Text</p> <p>The Text package has three features that TinyTest does not:</p> <ol> <li>It has a test script, <code>tests</code>.</li> <li>Not all its objects should be exposed for use: <code>tests</code> is only for developing Text itself.</li> <li>The test script depends upon another package (TinyTest).</li> </ol> <p>We deal with these as follows:</p> <ol> <li>Declare the test script in the Cider configuration.</li> <li>Create a public API to expose only specified objects.</li> <li>Specify the dependencies: the packages Text depends on.</li> </ol> <p>We follow the same steps as for TinyTest but stop before building the Text package.</p>"},{"location":"tutorial/#declare-the-test-script","title":"Declare the test script","text":"<p>Create the Cider project.</p> <p>In the configuration declare the test script <code>tests</code>.</p> text/cider.config <pre><code>{\n  CIDER: {\n    cider_version: \"0.48.0\",\n    dependencies: {\n      nuget: \"\",\n      tatin: \"\",\n    },\n    dependencies_dev: {\n      tatin: \"tatin-packages-dev\",\n    },\n...\n</code></pre> <p>As for TinyTest, create the APL source files and set up the GitHub repository.</p>"},{"location":"tutorial/#create-the-public-api","title":"Create the public API","text":"<p>If Text were a class it would expose <code>f</code> as a method and <code>DEBUG</code> as an instance property. But for a (lightweight) namespace, we follow the Tatin convention of listing the exposed objects in a constant <code>Public</code>.</p> <p><pre><code> Z\u2190Public\n\u235d niladic function as an immutable constant\n Z\u2190'f' 'DEBUG'\n</code></pre> and use a Tatin API function to create a public API for Text. <pre><code>      ]CD\n/Users/sjt/Projects/Dyalog/examples\n      cfg\u2190\u2395SE.Tatin.ReadPackageConfigFile 'text'\n      \u2395SE.Tatin.CreateAPIfromCFG (#.text cfg)\n</code></pre></p>"},{"location":"tutorial/#core-admin-and-tests","title":"Core, admin and tests","text":"<p>Divide your code from the beginning</p> <p>With a public API you conceal objects you don\u2019t intend for external use. There are three kinds:</p> <ul> <li>private for use by the exposed objects</li> <li>tests for use by the package developers</li> <li>admin for use in assembling a release</li> </ul> <p>It is good practice to divide the objects between namespaces. If we had done this with Text, its <code>APLSource/</code> folder would look like this: <pre><code>APLSource/\n\u251c\u2500\u2500 API/\n\u2502  \u251c\u2500\u2500 DEBUG.aplf\n\u2502  \u2514\u2500\u2500 f.aplf\n\u251c\u2500\u2500 Core/\n\u2502  \u251c\u2500\u2500 DEBUG.aplf\n\u2502  \u2514\u2500\u2500 f.aplf\n\u251c\u2500\u2500 Public.apla\n\u2514\u2500\u2500 Test/\n   \u2514\u2500\u2500 tests.aplf\n</code></pre> The packages in this worked example are too tiny for this to be helpful, but most packages are much larger.</p> <p>With your own packages you will find it much easier to divide the objects from the start than to divide them later.</p>"},{"location":"tutorial/#install-the-dependency","title":"Install the dependency","text":"<p>A package\u2019s dependencies are listed in the file <code>apl-dependencies.txt</code> in its root.</p> <p>The Text namespace requires TinyTest for development only: it is not needed in production. So we declare the <code>tatin-packages-dev/</code> folder that will hold TinyTest.</p> text/cider.config <pre><code>    ...\n    dependencies_dev: {\n      tatin: \"tatin-packages-dev\",\n    },\n    ...\n</code></pre> <p>and install TinyTest in it: <pre><code>      ]CIDER.AddTatinDependency sjt-tinytest -development\n</code></pre></p> <p>Git should take care of the dependency file and the build list but not the dependency or distribution packages themselves, therefore:</p> <p>text/.gitignore</p> <pre><code>tatin-packages-dev/*\n!/tatin-packages-dev//apl-dependencies.txt\n!/tatin-packages-dev//apl-buildlist.json\n/Dist\n</code></pre> <p>Our project now looks like this: <pre><code>text\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 apl-dependencies.txt\n\u251c\u2500\u2500 apl-package.json\n\u251c\u2500\u2500 APLSource/\n\u2502  \u251c\u2500\u2500 API/\n\u2502  \u2502  \u251c\u2500\u2500 DEBUG.aplf\n\u2502  \u2502  \u2514\u2500\u2500 f.aplf\n\u2502  \u251c\u2500\u2500 DEBUG.apla\n\u2502  \u251c\u2500\u2500 f.aplf\n\u2502  \u251c\u2500\u2500 Public.aplf\n\u2502  \u2514\u2500\u2500 tests.aplf\n\u251c\u2500\u2500 cider.config\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tatin-packages-dev/\n    \u251c\u2500\u2500 apl-buildlist.json\n    \u251c\u2500\u2500 apl-dependencies.txt\n    \u2514\u2500\u2500 sjt-tinytest-0.1.0\n        \u251c\u2500\u2500 apl-package.json\n        \u251c\u2500\u2500 APLSource/\n        \u2502  \u251c\u2500\u2500 catch.aplo\n        \u2502  \u2514\u2500\u2500 match.aplo\n        \u2514\u2500\u2500 LICENSE\n</code></pre> We see</p> <ul> <li>a <code>.gitignore</code> to exclude the dependencies from Git version control</li> <li><code>apl-dependencies.txt</code> listing the dependency on TinyTest</li> <li>the API defined in a child folder of <code>APLSource/</code></li> <li>TinyTest installed in <code>tatin-packages-dev/</code></li> </ul>"},{"location":"tutorial/#build-and-publish","title":"Build and publish","text":"When to build <p>If the Publish command finds no ZIP, it builds one. You only actually need use the Build command to replace the ZIP.</p> <p>A more elaborate package might need a Make script to, say, copy assets or compile documentation before the ZIP is built.</p> <p>The Text package is ready to be built and published. <pre><code>      ]TATIN.Publish text [tatin-test]\n</code></pre></p>"},{"location":"tutorial/#translate","title":"Translate","text":"For a string, return from a dictionary its equivalent in another language. <pre><code>      'fr' #.translate.text 'yesterday'\nhier\n</code></pre> <p> Translate</p> <ol> <li> <p>  Create the Cider project.</p> </li> <li> <p>  Create the APL source files in <code>APLSource/</code>.</p> </li> <li> <p> Initialise as a Tatin package</p> <ul> <li>The documentation for Translate is in a variable <code>help</code>.</li> <li>The APL source files use array notation.</li> </ul> <p>So for the Tatin configuration:</p> translate/apl-package.json <pre><code>documentation: \"help\",\n...\nminimumAplVersion: \"20.0\",\n</code></pre> </li> <li> <p> Install the dependencies</p> <p>Translate depends on Text and, in development, on TinyTest.</p> <p>Specify dependency folders in the Cider configuration:</p> translate/cider.config <pre><code>...\ndependencies: {\n  nuget: \"\",\n  tatin: \"tatin-packages\",\n},\ndependencies_dev: {\n  tatin: \"tatin-packages-dev\",\n},\n...\n</code></pre> <p>and install the dependencies there. <pre><code>      ]CIDER.AddTatinDependency sjt-text\n      ]CIDER.AddTatinDependency sjt-tinytest -development\n</code></pre></p> <p>Use <code>.gitignore</code> to exclude the dependency and distribution folders from version control.</p> translate/.gitignore <pre><code>tatin-packages-dev/*\n!/tatin-packages-dev//apl-dependencies.txt\n!/tatin-packages-dev//apl-buildlist.json\n/Dist\n</code></pre> </li> <li> <p>  Create the public API: <code>DEBUG</code>, <code>dictionary</code>, <code>help</code>, and <code>text</code>.</p> </li> <li> <p>  Build and publish the package.</p> <pre><code>      ]TATIN.Publish translate [tatin-test]\n</code></pre> <p>The ZIP is made and published to the Test server.</p> </li> </ol>"},{"location":"tutorial/#nicetime","title":"NiceTime","text":"<p>Take a timestamp and return a text string describing the offset from the present.</p> <p> NiceTime</p> <ol> <li> <p>  Create the Cider project.</p> </li> <li> <p>  Create the APL source files in <code>APLSource/</code>.</p> </li> <li> <p> Initialise as a Tatin package</p> <ul> <li>The documentation for NiceTime is in the repo README.</li> <li>The namespace has an initialisation function <code>init</code> that writes <code>dictionary</code> into Translate.</li> <li>The APL source files use array notation.</li> </ul> nicetime/apl-package.json <pre><code>documentation: \"https://github.com/5jt/NiceTime\",\n...\nlx: \"init\",\n...\nminimumAplVersion: \"20.0\",\n</code></pre> </li> <li> <p> Install the dependencies</p> <p>NiceTime depends on Translate and, in development, on TinyTest.</p> nicetime/cider.config <pre><code>...\ndependencies: {\n  nuget: \"\",\n  tatin: \"tatin-packages\",\n},\ndependencies_dev: {\n  tatin: \"tatin-packages-dev\",\n},\n...\n</code></pre> <p>and install the dependencies there. <pre><code>      ]CIDER.AddTatinDependency sjt-translate\n      ]CIDER.AddTatinDependency sjt-tinytest -development\n</code></pre></p> <p>Translate itself depends on Text, which Cider therefore also installs.</p> <p>Use <code>.gitignore</code> to exclude the dependency and distribution folders from Git version control.</p> nicetime/.gitignore <pre><code>tatin-packages-dev/*\n!/tatin-packages-dev//apl-dependencies.txt\n!/tatin-packages-dev//apl-buildlist.json\nDist/\n</code></pre> </li> <li> <p>  Create the public API: <code>sundayStart</code> (not yet implemented) and <code>was</code>.</p> </li> <li> <p>  Build and publish the package.</p> <pre><code>      ]TATIN.Publish nicetime [tatin-test]\n</code></pre> <p>The ZIP is made and published to the Test server.</p> </li> </ol> <p>On your local machine the NiceTime project now looks something like this:</p> <p>nicetime/</p> <pre><code>\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 apl-package.json\n\u251c\u2500\u2500 APLSource\n\u2502  \u251c\u2500\u2500 API\n\u2502  \u2502  \u251c\u2500\u2500 sundayStart.aplf\n\u2502  \u2502  \u2514\u2500\u2500 was.aplf\n\u2502  \u251c\u2500\u2500 dictionary.apla\n\u2502  \u251c\u2500\u2500 init.aplf\n\u2502  \u251c\u2500\u2500 monthnames.apla\n\u2502  \u251c\u2500\u2500 Public.apla\n\u2502  \u251c\u2500\u2500 sundayStart.apla\n\u2502  \u251c\u2500\u2500 tests.aplf\n\u2502  \u251c\u2500\u2500 was.aplf\n\u2502  \u2514\u2500\u2500 weekdays.apla\n\u251c\u2500\u2500 banner.png\n\u251c\u2500\u2500 cider.config\n\u251c\u2500\u2500 dictionary.csv\n\u251c\u2500\u2500 Dist\n\u2502  \u2514\u2500\u2500 sjt-nicetime-0.1.0.zip\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SPEC.md\n\u251c\u2500\u2500 tatin-packages\n\u2502  \u251c\u2500\u2500 apl-buildlist.json\n\u2502  \u251c\u2500\u2500 apl-dependencies.txt\n\u2502  \u251c\u2500\u2500 sjt-text-0.1.0\n\u2502  \u2502  \u251c\u2500\u2500 apl-package.json\n\u2502  \u2502  \u251c\u2500\u2500 APLSource\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 API\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500\u2500 DEBUG.aplf\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500\u2500 f.aplf\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 DEBUG.apla\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 f.aplf\n\u2502  \u2502  \u2502  \u251c\u2500\u2500 Public.apla\n\u2502  \u2502  \u2502  \u2514\u2500\u2500 tests.aplf\n\u2502  \u2502  \u2514\u2500\u2500 LICENSE\n\u2502  \u2514\u2500\u2500 sjt-translate-0.1.4\n\u2502      \u251c\u2500\u2500 apl-dependencies.txt\n\u2502      \u251c\u2500\u2500 apl-package.json\n\u2502      \u251c\u2500\u2500 APLSource\n\u2502      \u2502  \u251c\u2500\u2500 API\n\u2502      \u2502  \u2502  \u251c\u2500\u2500 DEBUG.aplf\n\u2502      \u2502  \u2502  \u251c\u2500\u2500 dictionary.aplf\n\u2502      \u2502  \u2502  \u251c\u2500\u2500 help.aplf\n\u2502      \u2502  \u2502  \u2514\u2500\u2500 text.aplf\n\u2502      \u2502  \u251c\u2500\u2500 DEBUG.apla\n\u2502      \u2502  \u251c\u2500\u2500 dictionary.apla\n\u2502      \u2502  \u251c\u2500\u2500 help.apla\n\u2502      \u2502  \u251c\u2500\u2500 Public.apla\n\u2502      \u2502  \u251c\u2500\u2500 tests.aplf\n\u2502      \u2502  \u251c\u2500\u2500 text.aplf\n\u2502      \u2502  \u2514\u2500\u2500 validDictionary.aplf\n\u2502      \u2514\u2500\u2500 LICENSE\n\u2514\u2500\u2500 tatin-packages-dev\n    \u251c\u2500\u2500 apl-buildlist.json\n    \u251c\u2500\u2500 apl-dependencies.txt\n    \u2514\u2500\u2500 sjt-tinytest-0.1.1\n        \u251c\u2500\u2500 apl-package.json\n        \u251c\u2500\u2500 APLSource\n        \u2502  \u251c\u2500\u2500 catch.aplo\n        \u2502  \u2514\u2500\u2500 match.aplo\n        \u2514\u2500\u2500 LICENSE\n</code></pre>"},{"location":"user-commands/","title":"User commands","text":"<p>User commands are Cider\u2019s user interface</p> <p>AddNuGetDependencies ListOpenProjects AddTatinDependencies ListTatinDependencies CloseProject Make Config OpenProject CreateProject ProjectConfig Help RunTests ListAliases UpdateCider ListNuGetDependencies Version</p> <p>Cider user commands and their options are case-insensitive. They all have help built in, for example</p> <pre><code>]cider -?\n]cider -??\n]CIDER.AddNuGetDependencies -?\n</code></pre>"},{"location":"user-commands/#identifying-projects","title":"Identifying projects","text":"<p>You can always identify a project by its project path.</p> <pre><code>]CIDER.OpenProject path/to/project\n</code></pre> <p>If you have assigned it an alias (e.g. <code>foo</code>) you can use the alias, embraced with square brackets to mark it as an alias.</p> <pre><code>]CIDER.OpenProject [foo]\n</code></pre> <p>If a project is open, you can identify it by its fully qualified project space.</p> <pre><code>]CIDER.ListTatinDependencies #.bar\n</code></pre> <p>Square brackets in the command syntax</p> <p>Square brackets in the command sytaxes shown on this page indicate optional command arguments, not aliases. For example, the <code>ListTatinDependencies</code> command has syntax</p> <pre><code>]CIDER.ListTatinDependencies [project]\n</code></pre> <p>If the project has alias <code>foo</code>, has been opened in <code>#.bar</code>, and is the only project open, then the following are equivalent.</p> <pre><code>]CIDER.ListTatinDependencies path/to/project\n]CIDER.ListTatinDependencies [foo]\n]CIDER.ListTatinDependencies #.bar\n]CIDER.ListTatinDependencies\n</code></pre>"},{"location":"user-commands/#command-options","title":"Command options","text":"<p>Options are further optional arguments to the command.</p> <p>Specify all the command\u2019s arguments before any options. Prefix options with dashes, e.g.</p> <pre><code>]CIDER.CreateProject path/to/foo #.path.to.bar -noEdit\n]CIDER.OpenProject path/to/foo -alias=ted\n</code></pre> <p>Options affect only the current command. They override settings in the project and global configurations and leave them unchanged.</p> <p>Each command\u2019s options are tabulated below its definition.</p>"},{"location":"user-commands/#add-nuget-dependencies","title":"Add NuGet dependencies","text":"<pre><code>]CIDER.AddNuGetDependencies pkglist [project]\n</code></pre> <p>Where <code>pkglist</code> is a comma-separated list of NuGet packages to be installed, Cider registers the listed dependencies in the project.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p> <p>If the project config does not specify a NuGet dependency folder, Cider asks you to edit it.</p> <code>target=</code> Name of a namespace to create and add to the project config\u2019s <code>dependencies</code> or the <code>dependencies_dev</code> setting.If it is already configured, Cider signals an error. You then need to edit the project\u2019s config."},{"location":"user-commands/#add-tatin-dependencies","title":"Add Tatin dependencies","text":"<pre><code>]CIDER.AddTatinDependency pkglist [project]\n</code></pre> <p>Where <code>pkglist</code> is a comma-separated list of Tatin packages to be installed, Cider registers the listed dependencies in the project.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p> <p>If the project config does not specify a Tatin dependency folder, Cider asks you to edit it.</p> <code>development</code> By default the packages are added as project dependencies. This option makes them development dependencies instead. <code>target=</code> Name of a namespace to be created and added to the <code>dependencies</code> or the <code>dependencies_dev</code> parameter.If the namespace exists, Cider signals an error. You then need to edit the project\u2019s config file."},{"location":"user-commands/#close-project","title":"Close project","text":"<pre><code>]CIDER.CloseProject [projects]\n</code></pre> <p>Where <code>projects</code> is one or more projects, Cider breaks the link between their namespaces and the associated files on disk.</p> <p>If you omit <code>projects</code> Cider uses the one open project or, if you have more than one open, asks you which.</p> <p>Separate multiple projects with spaces or commas.</p> <p>Where a particular project is specified, success or failure is reported as a boolean. Otherwise attempts to close projects are reported in detail.</p> <code>all</code> Close all open projects <code>fast</code> Close project without checking for Dropbox conflicts."},{"location":"user-commands/#config","title":"Config","text":"<pre><code>]CIDER.Config\n</code></pre> <p>Cider prints the content of its global config file to the session.</p> <code>edit</code> Display the global config for editing. Changes are saved to file but do not affect the currently running instance of Cider. <p>Example</p> <pre><code>      ]CIDER.Config\n --- Cider Config File: /Users/sjt/.cider/config.json ---\n {\n   // AskForDirChange: 1,\n   // CheckForDropboxConflicts: 1,\n   // ExecuteAfterProjectOpen: \"\u2395SE.Path.To.Function\",\n   // ReportGitStatus: 1,\n   // verbose: 1,\n }\n</code></pre>"},{"location":"user-commands/#create-project","title":"Create project","text":"<pre><code>]CIDER.CreateProject [path] [space]\n</code></pre> <p>Where</p> <ul> <li><code>path</code> (optional) is a path to the project folder</li> <li><code>space</code> (optional) is a namespace in the active workspace to be linked to the project</li> </ul> <p>Cider initialises the project folder, links it to the project space, and offers the project config for editing, checking required settings are specified correctly.</p> <p>Finally, Cider offers to open the new project.</p> <p>If you omit <code>path</code>, Cider proposes the current working directory. If you omit <code>space</code>, Cider uses the name of the project folder.</p> <p>If the project folder already contains a file <code>cider.config</code> Cider signals an error, unless the <code>acceptConfig</code> flag is set.</p> <code>acceptConfig</code> Accept an already existing config file. <code>alias=</code> Remember this alias for the project. Aliases are not case sensitive. <code>batch</code> Open the new project without asking me for confirmation. <code>ignoreUserExec</code> Open the project without executing the global config\u2019s initialisation function. <code>noEdit</code> Do not offer me the configuration for editing. Encapsulate a project in its own namespace <p>To create a root project specify <code>#</code> as the project space.</p>"},{"location":"user-commands/#help","title":"Help","text":"<pre><code>]CIDER.Help\n</code></pre> <p>Displays the Cider User Guide.</p>"},{"location":"user-commands/#list-aliases","title":"List aliases","text":"<pre><code>]CIDER.ListAliases\n</code></pre> <p>Lists all defined aliases with their folders.</p> <code>batch</code> With <code>prune</code> delete without asking me for confirmation. <code>edit</code> Let me edit the file of aliases. <code>prune</code> Delete aliases whose folders cannot be found. (Ask me first for confirmation.) <code>scan=</code> Scan the specified folder for projects and ask me which to add as aliases. <p>Only options <code>prune</code> and <code>batch</code> can be used together.</p>"},{"location":"user-commands/#list-nuget-dependencies","title":"List NuGet dependencies","text":"<pre><code>]CIDER.ListNuGetDependencies [project]\n</code></pre> <p>Lists the project\u2019s NuGet dependencies.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p>"},{"location":"user-commands/#list-open-projects","title":"List open projects","text":"<pre><code>]CIDER.ListOpenProjects\n</code></pre> <p>Prints a list of all open projects.</p> <code>verbose</code> Instead of a list, print a table."},{"location":"user-commands/#list-tatin-dependencies","title":"List Tatin dependencies","text":"<pre><code>]CIDER.ListTatinDependencies [project]\n</code></pre> <p>Lists Tatin packages installed as its dependencies.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p> <code>full</code> Print a hierarchical report on all dependencies. <p>The full report does not show what is actually used, but what the packages themselves require. (Due to minimum version selection they might end up using a later version.) This can help show why a particular (typically old) package is required.</p>"},{"location":"user-commands/#make","title":"Make","text":"<pre><code>]CIDER.HowToMakeNewVersion [project]\n</code></pre> <p>Prints the project\u2019s Make expression: the expression that builds a new version of the project.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p>"},{"location":"user-commands/#open-project","title":"Open project","text":"<pre><code>]CIDER.OpenProject project\n</code></pre> <p>Builds the project in the active workspace, linked to its source files. More detail\u2026</p> <code>alias=</code> Remember this alias for the project. <code>batch</code> Do not ask me for confirmation; print nothing to the session.[^batch] <code>ignoreUserExec</code> Do not execute the global initialisation function. <code>import</code> Do not link APL objects to their source files. (Ignore the <code>watch</code> setting in the project config.) <code>noPkgLoad</code> Do not load the project\u2019s Tatin packages. <code>parent=</code> Override the <code>parent</code> setting in the project config. <code>projectSpace=</code> Override the <code>projectSpace</code> setting in the project config. <code>suppressInit</code> Do not execute the project\u2019s initialisation function <code>verbose</code> Report command actions in more detail. <code>watch=</code> Override the <code>watch</code> setting in the project config. <p>Options <code>import</code> and <code>watch=</code> cannot be used together.</p> <p>The <code>batch</code> option is intended for test cases. Consider instead using the <code>OpenProject</code> API function.</p>"},{"location":"user-commands/#project-config","title":"Project config","text":"<pre><code>]CIDER.ProjectConfig [project]\n</code></pre> <p>Opens the project configuration in the Editor.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p> <code>edit</code> Display the config for editing."},{"location":"user-commands/#run-tests","title":"Run tests","text":"<pre><code>]CIDER.RunTests [project]\n</code></pre> <p>Prints the APL expression that executes the project\u2019s test suite.</p> <p>If you omit <code>project</code> Cider uses the one open project or, if you have more than one open, asks you which.</p>"},{"location":"user-commands/#update-cider","title":"Update Cider","text":"<pre><code>]CIDER.UpdateCider [version]\n</code></pre> <p>Where <code>version</code> is <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>, tries to update Cider to it.</p> <p>If you omit <code>version</code> and a later version is available, Cider asks whether you want to update to it.</p> <p>The update is performed automatically, but does not change Cider in the current workspace. When the update is complete, restart Dyalog, rebuild the user commands, and print the current version.</p> <pre><code>      ]UReset\n153 commands reloaded\n      ]CIDER.Version\n0.44.0+835\n</code></pre> Do not use the command for Cider versions prior to 0.37.3 Versions 0.37.1 and 0.37.2Versions prior to 0.37.0 <p>These versions were installed into the new folder but with a level missing.</p> <p>Reinstall Cider.</p> <p>The next time you use <code>]CIDER.UpdateCider</code> it will remove Cider from the wrong folder.</p> <p>Uninstall: delete the <code>Cider/</code> folder from your <code>MyUCMDs/</code> folder.</p> <p>Reinstall Cider.</p> <p> Troubleshooting: Updating Cider</p>"},{"location":"user-commands/#version","title":"Version","text":"<pre><code>]CIDER.Version\n</code></pre> <p>Prints major, minor, patch and build numbers:</p> <pre><code>      ]CIDER.Version\n0.44.0+835\n</code></pre>"}]}